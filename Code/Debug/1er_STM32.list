
1er_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  0002040c  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab0  08004ab0  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08004ab8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000040c  08004ec4  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08004ec4  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc1a  00000000  00000000  00020435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244f  00000000  00000000  0002e04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000304a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  000310c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017434  00000000  00000000  00031c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e90e  00000000  00000000  0004903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bda6  00000000  00000000  0005794a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e36f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003104  00000000  00000000  000e3740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000040c 	.word	0x2000040c
 8000158:	00000000 	.word	0x00000000
 800015c:	080049c8 	.word	0x080049c8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000410 	.word	0x20000410
 8000178:	080049c8 	.word	0x080049c8

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b976 	b.w	8000494 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	4688      	mov	r8, r1
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d14d      	bne.n	800026c <__udivmoddi4+0xac>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4694      	mov	ip, r2
 80001d4:	d968      	bls.n	80002a8 <__udivmoddi4+0xe8>
 80001d6:	fab2 f282 	clz	r2, r2
 80001da:	b152      	cbz	r2, 80001f2 <__udivmoddi4+0x32>
 80001dc:	fa01 f302 	lsl.w	r3, r1, r2
 80001e0:	f1c2 0120 	rsb	r1, r2, #32
 80001e4:	fa20 f101 	lsr.w	r1, r0, r1
 80001e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ec:	ea41 0803 	orr.w	r8, r1, r3
 80001f0:	4094      	lsls	r4, r2
 80001f2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001fa:	fa1f fe8c 	uxth.w	lr, ip
 80001fe:	fb01 8817 	mls	r8, r1, r7, r8
 8000202:	fb07 f00e 	mul.w	r0, r7, lr
 8000206:	0c23      	lsrs	r3, r4, #16
 8000208:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800020c:	4298      	cmp	r0, r3
 800020e:	d90a      	bls.n	8000226 <__udivmoddi4+0x66>
 8000210:	eb1c 0303 	adds.w	r3, ip, r3
 8000214:	f107 35ff 	add.w	r5, r7, #4294967295
 8000218:	f080 811e 	bcs.w	8000458 <__udivmoddi4+0x298>
 800021c:	4298      	cmp	r0, r3
 800021e:	f240 811b 	bls.w	8000458 <__udivmoddi4+0x298>
 8000222:	3f02      	subs	r7, #2
 8000224:	4463      	add	r3, ip
 8000226:	1a1b      	subs	r3, r3, r0
 8000228:	fbb3 f0f1 	udiv	r0, r3, r1
 800022c:	fb01 3310 	mls	r3, r1, r0, r3
 8000230:	fb00 fe0e 	mul.w	lr, r0, lr
 8000234:	b2a4      	uxth	r4, r4
 8000236:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800023a:	45a6      	cmp	lr, r4
 800023c:	d90a      	bls.n	8000254 <__udivmoddi4+0x94>
 800023e:	eb1c 0404 	adds.w	r4, ip, r4
 8000242:	f100 33ff 	add.w	r3, r0, #4294967295
 8000246:	f080 8109 	bcs.w	800045c <__udivmoddi4+0x29c>
 800024a:	45a6      	cmp	lr, r4
 800024c:	f240 8106 	bls.w	800045c <__udivmoddi4+0x29c>
 8000250:	4464      	add	r4, ip
 8000252:	3802      	subs	r0, #2
 8000254:	2100      	movs	r1, #0
 8000256:	eba4 040e 	sub.w	r4, r4, lr
 800025a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025e:	b11e      	cbz	r6, 8000268 <__udivmoddi4+0xa8>
 8000260:	2300      	movs	r3, #0
 8000262:	40d4      	lsrs	r4, r2
 8000264:	e9c6 4300 	strd	r4, r3, [r6]
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	428b      	cmp	r3, r1
 800026e:	d908      	bls.n	8000282 <__udivmoddi4+0xc2>
 8000270:	2e00      	cmp	r6, #0
 8000272:	f000 80ee 	beq.w	8000452 <__udivmoddi4+0x292>
 8000276:	2100      	movs	r1, #0
 8000278:	e9c6 0500 	strd	r0, r5, [r6]
 800027c:	4608      	mov	r0, r1
 800027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000282:	fab3 f183 	clz	r1, r3
 8000286:	2900      	cmp	r1, #0
 8000288:	d14a      	bne.n	8000320 <__udivmoddi4+0x160>
 800028a:	42ab      	cmp	r3, r5
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd4>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fc 	bhi.w	800048c <__udivmoddi4+0x2cc>
 8000294:	1a84      	subs	r4, r0, r2
 8000296:	eb65 0303 	sbc.w	r3, r5, r3
 800029a:	2001      	movs	r0, #1
 800029c:	4698      	mov	r8, r3
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d0e2      	beq.n	8000268 <__udivmoddi4+0xa8>
 80002a2:	e9c6 4800 	strd	r4, r8, [r6]
 80002a6:	e7df      	b.n	8000268 <__udivmoddi4+0xa8>
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xec>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	f040 8091 	bne.w	80003d8 <__udivmoddi4+0x218>
 80002b6:	eba1 000c 	sub.w	r0, r1, ip
 80002ba:	2101      	movs	r1, #1
 80002bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c0:	fa1f fe8c 	uxth.w	lr, ip
 80002c4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c8:	fb07 0013 	mls	r0, r7, r3, r0
 80002cc:	0c25      	lsrs	r5, r4, #16
 80002ce:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002d2:	fb0e f003 	mul.w	r0, lr, r3
 80002d6:	42a8      	cmp	r0, r5
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x12c>
 80002da:	eb1c 0505 	adds.w	r5, ip, r5
 80002de:	f103 38ff 	add.w	r8, r3, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x12a>
 80002e4:	42a8      	cmp	r0, r5
 80002e6:	f200 80ce 	bhi.w	8000486 <__udivmoddi4+0x2c6>
 80002ea:	4643      	mov	r3, r8
 80002ec:	1a2d      	subs	r5, r5, r0
 80002ee:	fbb5 f0f7 	udiv	r0, r5, r7
 80002f2:	fb07 5510 	mls	r5, r7, r0, r5
 80002f6:	fb0e fe00 	mul.w	lr, lr, r0
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000300:	45a6      	cmp	lr, r4
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x156>
 8000304:	eb1c 0404 	adds.w	r4, ip, r4
 8000308:	f100 35ff 	add.w	r5, r0, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x154>
 800030e:	45a6      	cmp	lr, r4
 8000310:	f200 80b6 	bhi.w	8000480 <__udivmoddi4+0x2c0>
 8000314:	4628      	mov	r0, r5
 8000316:	eba4 040e 	sub.w	r4, r4, lr
 800031a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031e:	e79e      	b.n	800025e <__udivmoddi4+0x9e>
 8000320:	f1c1 0720 	rsb	r7, r1, #32
 8000324:	408b      	lsls	r3, r1
 8000326:	fa22 fc07 	lsr.w	ip, r2, r7
 800032a:	ea4c 0c03 	orr.w	ip, ip, r3
 800032e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000332:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000336:	fbba f8f9 	udiv	r8, sl, r9
 800033a:	fa20 f307 	lsr.w	r3, r0, r7
 800033e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000342:	408d      	lsls	r5, r1
 8000344:	fa1f fe8c 	uxth.w	lr, ip
 8000348:	431d      	orrs	r5, r3
 800034a:	fa00 f301 	lsl.w	r3, r0, r1
 800034e:	fb08 f00e 	mul.w	r0, r8, lr
 8000352:	0c2c      	lsrs	r4, r5, #16
 8000354:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000358:	42a0      	cmp	r0, r4
 800035a:	fa02 f201 	lsl.w	r2, r2, r1
 800035e:	d90b      	bls.n	8000378 <__udivmoddi4+0x1b8>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f108 3aff 	add.w	sl, r8, #4294967295
 8000368:	f080 8088 	bcs.w	800047c <__udivmoddi4+0x2bc>
 800036c:	42a0      	cmp	r0, r4
 800036e:	f240 8085 	bls.w	800047c <__udivmoddi4+0x2bc>
 8000372:	f1a8 0802 	sub.w	r8, r8, #2
 8000376:	4464      	add	r4, ip
 8000378:	1a24      	subs	r4, r4, r0
 800037a:	fbb4 f0f9 	udiv	r0, r4, r9
 800037e:	fb09 4410 	mls	r4, r9, r0, r4
 8000382:	fb00 fe0e 	mul.w	lr, r0, lr
 8000386:	b2ad      	uxth	r5, r5
 8000388:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800038c:	45a6      	cmp	lr, r4
 800038e:	d908      	bls.n	80003a2 <__udivmoddi4+0x1e2>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f100 35ff 	add.w	r5, r0, #4294967295
 8000398:	d26c      	bcs.n	8000474 <__udivmoddi4+0x2b4>
 800039a:	45a6      	cmp	lr, r4
 800039c:	d96a      	bls.n	8000474 <__udivmoddi4+0x2b4>
 800039e:	3802      	subs	r0, #2
 80003a0:	4464      	add	r4, ip
 80003a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a6:	fba0 9502 	umull	r9, r5, r0, r2
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	42ac      	cmp	r4, r5
 80003b0:	46c8      	mov	r8, r9
 80003b2:	46ae      	mov	lr, r5
 80003b4:	d356      	bcc.n	8000464 <__udivmoddi4+0x2a4>
 80003b6:	d053      	beq.n	8000460 <__udivmoddi4+0x2a0>
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d069      	beq.n	8000490 <__udivmoddi4+0x2d0>
 80003bc:	ebb3 0208 	subs.w	r2, r3, r8
 80003c0:	eb64 040e 	sbc.w	r4, r4, lr
 80003c4:	fa22 f301 	lsr.w	r3, r2, r1
 80003c8:	fa04 f707 	lsl.w	r7, r4, r7
 80003cc:	431f      	orrs	r7, r3
 80003ce:	40cc      	lsrs	r4, r1
 80003d0:	e9c6 7400 	strd	r7, r4, [r6]
 80003d4:	2100      	movs	r1, #0
 80003d6:	e747      	b.n	8000268 <__udivmoddi4+0xa8>
 80003d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003dc:	f1c2 0120 	rsb	r1, r2, #32
 80003e0:	fa25 f301 	lsr.w	r3, r5, r1
 80003e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e8:	fa20 f101 	lsr.w	r1, r0, r1
 80003ec:	4095      	lsls	r5, r2
 80003ee:	430d      	orrs	r5, r1
 80003f0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f4:	fb07 3311 	mls	r3, r7, r1, r3
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	0c28      	lsrs	r0, r5, #16
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	fb01 f30e 	mul.w	r3, r1, lr
 8000406:	4283      	cmp	r3, r0
 8000408:	fa04 f402 	lsl.w	r4, r4, r2
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x260>
 800040e:	eb1c 0000 	adds.w	r0, ip, r0
 8000412:	f101 38ff 	add.w	r8, r1, #4294967295
 8000416:	d22f      	bcs.n	8000478 <__udivmoddi4+0x2b8>
 8000418:	4283      	cmp	r3, r0
 800041a:	d92d      	bls.n	8000478 <__udivmoddi4+0x2b8>
 800041c:	3902      	subs	r1, #2
 800041e:	4460      	add	r0, ip
 8000420:	1ac0      	subs	r0, r0, r3
 8000422:	fbb0 f3f7 	udiv	r3, r0, r7
 8000426:	fb07 0013 	mls	r0, r7, r3, r0
 800042a:	b2ad      	uxth	r5, r5
 800042c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000430:	fb03 f00e 	mul.w	r0, r3, lr
 8000434:	42a8      	cmp	r0, r5
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x28a>
 8000438:	eb1c 0505 	adds.w	r5, ip, r5
 800043c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000440:	d216      	bcs.n	8000470 <__udivmoddi4+0x2b0>
 8000442:	42a8      	cmp	r0, r5
 8000444:	d914      	bls.n	8000470 <__udivmoddi4+0x2b0>
 8000446:	3b02      	subs	r3, #2
 8000448:	4465      	add	r5, ip
 800044a:	1a28      	subs	r0, r5, r0
 800044c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000450:	e738      	b.n	80002c4 <__udivmoddi4+0x104>
 8000452:	4631      	mov	r1, r6
 8000454:	4630      	mov	r0, r6
 8000456:	e707      	b.n	8000268 <__udivmoddi4+0xa8>
 8000458:	462f      	mov	r7, r5
 800045a:	e6e4      	b.n	8000226 <__udivmoddi4+0x66>
 800045c:	4618      	mov	r0, r3
 800045e:	e6f9      	b.n	8000254 <__udivmoddi4+0x94>
 8000460:	454b      	cmp	r3, r9
 8000462:	d2a9      	bcs.n	80003b8 <__udivmoddi4+0x1f8>
 8000464:	ebb9 0802 	subs.w	r8, r9, r2
 8000468:	eb65 0e0c 	sbc.w	lr, r5, ip
 800046c:	3801      	subs	r0, #1
 800046e:	e7a3      	b.n	80003b8 <__udivmoddi4+0x1f8>
 8000470:	4643      	mov	r3, r8
 8000472:	e7ea      	b.n	800044a <__udivmoddi4+0x28a>
 8000474:	4628      	mov	r0, r5
 8000476:	e794      	b.n	80003a2 <__udivmoddi4+0x1e2>
 8000478:	4641      	mov	r1, r8
 800047a:	e7d1      	b.n	8000420 <__udivmoddi4+0x260>
 800047c:	46d0      	mov	r8, sl
 800047e:	e77b      	b.n	8000378 <__udivmoddi4+0x1b8>
 8000480:	4464      	add	r4, ip
 8000482:	3802      	subs	r0, #2
 8000484:	e747      	b.n	8000316 <__udivmoddi4+0x156>
 8000486:	3b02      	subs	r3, #2
 8000488:	4465      	add	r5, ip
 800048a:	e72f      	b.n	80002ec <__udivmoddi4+0x12c>
 800048c:	4608      	mov	r0, r1
 800048e:	e706      	b.n	800029e <__udivmoddi4+0xde>
 8000490:	4631      	mov	r1, r6
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0xa8>

08000494 <__aeabi_idiv0>:
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop

08000498 <set_new_state>:
 * @brief Set new FSM state
 * @param _new_state Enum member representing desired state.
 * It will check if desired state is contained in states list.
 */
static void set_new_state(FSM_State_Enum _new_state)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	// Check if desired state is contained in states array
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz))
 80004a2:	79fa      	ldrb	r2, [r7, #7]
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <set_new_state+0x68>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d223      	bcs.n	80004f6 <set_new_state+0x5e>
	{
		// Set new FSM state UID & callback
		fsm_handle->state = fsm_handle->states_list[_new_state];
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <set_new_state+0x68>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6a1a      	ldr	r2, [r3, #32]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	441a      	add	r2, r3
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <set_new_state+0x68>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c2:	e883 0003 	stmia.w	r3, {r0, r1}

		// Reset execution count for variables initializations
		fsm_handle->controllers.state_execution_count = 0;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <set_new_state+0x68>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]

		// Reset animation state
		fsm_handle->controllers.animation_state = ANIMATION_RUNNING;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <set_new_state+0x68>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	751a      	strb	r2, [r3, #20]

		// Reset base time for animations
		fsm_handle->controllers.state_base_time = HAL_GetTick();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <set_new_state+0x68>)
 80004d8:	681c      	ldr	r4, [r3, #0]
 80004da:	f001 fe89 	bl	80021f0 <HAL_GetTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	6123      	str	r3, [r4, #16]

		//Reset button pushed counter
		fsm_handle->inputs.nb_press_btn1 = 0;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <set_new_state+0x68>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2200      	movs	r2, #0
 80004e8:	721a      	strb	r2, [r3, #8]
		fsm_handle->inputs.nb_press_btn2 = 0;
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <set_new_state+0x68>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	725a      	strb	r2, [r3, #9]

		//stop the timer loop
		stop_timer();
 80004f2:	f004 f92d 	bl	8004750 <stop_timer>
	}
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000042c 	.word	0x2000042c

08000504 <pong_init>:
 * @param _pong_handle Handle to pong peripherals
 * @param _fsm_handle Handle to Pong FSM
 * @retval HAL status
 */
HAL_StatusTypeDef pong_init(Pong_Handle_TypeDef *_pong_handle, FSM_Handle_TypeDef *_fsm_handle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef led_arrray_status = HAL_OK;
 8000512:	2300      	movs	r3, #0
 8000514:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef music_status = HAL_OK;
 8000516:	2300      	movs	r3, #0
 8000518:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef timer_status = HAL_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	733b      	strb	r3, [r7, #12]

	/* Attribute input parameters */
	pong_handle = _pong_handle;
 800051e:	4a2c      	ldr	r2, [pc, #176]	; (80005d0 <pong_init+0xcc>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 8000524:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <pong_init+0xd0>)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	6013      	str	r3, [r2, #0]

	/* Check input parameters */
	CHECK_PONG_PARAMS();
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <pong_init+0xcc>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <pong_init+0x36>
 8000532:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <pong_init+0xd0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d107      	bne.n	800054a <pong_init+0x46>
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <pong_init+0xcc>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <pong_init+0xd0>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	e03e      	b.n	80005c8 <pong_init+0xc4>

	/* Init hardware peripherals */

	led_arrray_status = led_array_init(&pong_handle->led_array);
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <pong_init+0xcc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fa9e 	bl	8001a90 <led_array_init>
 8000554:	4603      	mov	r3, r0
 8000556:	73bb      	strb	r3, [r7, #14]

	max7219_status = max7219_init(&pong_handle->max7219_handle);
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <pong_init+0xcc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	330c      	adds	r3, #12
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fb38 	bl	8001bd4 <max7219_init>
 8000564:	4603      	mov	r3, r0
 8000566:	73fb      	strb	r3, [r7, #15]

	music_status = init_music(&pong_handle->music_handler);
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <pong_init+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3320      	adds	r3, #32
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f97c 	bl	800486c <init_music>
 8000574:	4603      	mov	r3, r0
 8000576:	737b      	strb	r3, [r7, #13]

	timer_status = timer_init(&pong_handle->timer_handler);
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <pong_init+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3334      	adds	r3, #52	; 0x34
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f888 	bl	8004694 <timer_init>
 8000584:	4603      	mov	r3, r0
 8000586:	733b      	strb	r3, [r7, #12]

	/* CHECK HARDWARE INIT BEGIN  ----------------------------------------------------------------------------------*/

	if (max7219_status != HAL_OK)
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <pong_init+0x8e>
		return max7219_status;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	e01a      	b.n	80005c8 <pong_init+0xc4>

	else if(led_arrray_status != HAL_OK)
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <pong_init+0x98>
		return led_arrray_status;
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	e015      	b.n	80005c8 <pong_init+0xc4>

	else if(music_status != HAL_OK)
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <pong_init+0xa2>
		return music_status;
 80005a2:	7b7b      	ldrb	r3, [r7, #13]
 80005a4:	e010      	b.n	80005c8 <pong_init+0xc4>

	else if(timer_status != HAL_OK)
 80005a6:	7b3b      	ldrb	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <pong_init+0xac>
			return timer_status;
 80005ac:	7b3b      	ldrb	r3, [r7, #12]
 80005ae:	e00b      	b.n	80005c8 <pong_init+0xc4>

	/* CHECK HARDWARE INIT END  ----------------------------------------------------------------------------------*/

	/* Init FSM */
	fsm_handle->states_list = states_list;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <pong_init+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <pong_init+0xd4>)
 80005b6:	621a      	str	r2, [r3, #32]
	fsm_handle->states_list_sz = sizeof(states_list) / sizeof(FSM_State_TypeDef);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <pong_init+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	220b      	movs	r2, #11
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
	set_new_state(STATE_START);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff ff69 	bl	8000498 <set_new_state>


	return HAL_OK;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000428 	.word	0x20000428
 80005d4:	2000042c 	.word	0x2000042c
 80005d8:	20000000 	.word	0x20000000

080005dc <pong_run>:
/**
 * @brief Run pong game, execute FSM callback and check for transition
 * @retval HAL status
 */
HAL_StatusTypeDef pong_run(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	CHECK_PONG_PARAMS();
 80005e0:	4b89      	ldr	r3, [pc, #548]	; (8000808 <pong_run+0x22c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <pong_run+0x14>
 80005e8:	4b88      	ldr	r3, [pc, #544]	; (800080c <pong_run+0x230>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d107      	bne.n	8000600 <pong_run+0x24>
 80005f0:	4b85      	ldr	r3, [pc, #532]	; (8000808 <pong_run+0x22c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	4b85      	ldr	r3, [pc, #532]	; (800080c <pong_run+0x230>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	e100      	b.n	8000802 <pong_run+0x226>

	/* RUN STATE */
	// Call associated callback
	fsm_handle->state.state_callback();
 8000600:	4b82      	ldr	r3, [pc, #520]	; (800080c <pong_run+0x230>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4798      	blx	r3

	// Increase execution count
	fsm_handle->controllers.state_execution_count += 1;
 8000608:	4b80      	ldr	r3, [pc, #512]	; (800080c <pong_run+0x230>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	4b7f      	ldr	r3, [pc, #508]	; (800080c <pong_run+0x230>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3201      	adds	r2, #1
 8000614:	60da      	str	r2, [r3, #12]

	/* CHECK TRANSITION */
	switch (fsm_handle->state.state)
 8000616:	4b7d      	ldr	r3, [pc, #500]	; (800080c <pong_run+0x230>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b0a      	cmp	r3, #10
 800061e:	f200 80d6 	bhi.w	80007ce <pong_run+0x1f2>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <pong_run+0x4c>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000655 	.word	0x08000655
 800062c:	08000669 	.word	0x08000669
 8000630:	0800067d 	.word	0x0800067d
 8000634:	08000691 	.word	0x08000691
 8000638:	080006c5 	.word	0x080006c5
 800063c:	080006f7 	.word	0x080006f7
 8000640:	08000721 	.word	0x08000721
 8000644:	0800074b 	.word	0x0800074b
 8000648:	08000771 	.word	0x08000771
 800064c:	08000797 	.word	0x08000797
 8000650:	080007b3 	.word	0x080007b3

	/* Start state */
	case STATE_START:

		//change state at the end of the music animation
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED)
 8000654:	4b6d      	ldr	r3, [pc, #436]	; (800080c <pong_run+0x230>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	7d1b      	ldrb	r3, [r3, #20]
 800065a:	2b01      	cmp	r3, #1
 800065c:	f040 80bb 	bne.w	80007d6 <pong_run+0x1fa>
			set_new_state(STATE_WPP1);
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff ff19 	bl	8000498 <set_new_state>
		break;
 8000666:	e0b6      	b.n	80007d6 <pong_run+0x1fa>

	/* "Wait for P1 to press PB1" state */
	case STATE_WPP1:

		//change state when player 1 push his button
		if (fsm_handle->inputs.nb_press_btn1 >= 1)
 8000668:	4b68      	ldr	r3, [pc, #416]	; (800080c <pong_run+0x230>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	7a1b      	ldrb	r3, [r3, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	f000 80b3 	beq.w	80007da <pong_run+0x1fe>
			set_new_state(STATE_GTP2);
 8000674:	2004      	movs	r0, #4
 8000676:	f7ff ff0f 	bl	8000498 <set_new_state>

		break;
 800067a:	e0ae      	b.n	80007da <pong_run+0x1fe>

	/* "Wait for P2 to press PB2" state */
	case STATE_WPP2:

		//change state when player 1 push his button
		if (fsm_handle->inputs.nb_press_btn2 >= 1)
 800067c:	4b63      	ldr	r3, [pc, #396]	; (800080c <pong_run+0x230>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	7a5b      	ldrb	r3, [r3, #9]
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 80ab 	beq.w	80007de <pong_run+0x202>
			set_new_state(STATE_GTP1);
 8000688:	2003      	movs	r0, #3
 800068a:	f7ff ff05 	bl	8000498 <set_new_state>

		break;
 800068e:	e0a6      	b.n	80007de <pong_run+0x202>

	/* "Go to P1" state */
	case STATE_GTP1:

		//change state if player 2 push the button before the led went tho the right border
		if (fsm_handle->inputs.nb_press_btn1 >=1 && fsm_handle->controllers.led_index < 7)
 8000690:	4b5e      	ldr	r3, [pc, #376]	; (800080c <pong_run+0x230>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7a1b      	ldrb	r3, [r3, #8]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d009      	beq.n	80006ae <pong_run+0xd2>
 800069a:	4b5c      	ldr	r3, [pc, #368]	; (800080c <pong_run+0x230>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	dc03      	bgt.n	80006ae <pong_run+0xd2>
			set_new_state(STATE_IP2S);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f7ff fef6 	bl	8000498 <set_new_state>
		//change state if led touch the right border
		else if (fsm_handle->controllers.led_index > 7)
			set_new_state(STATE_RPP1);

		break;
 80006ac:	e099      	b.n	80007e2 <pong_run+0x206>
		else if (fsm_handle->controllers.led_index > 7)
 80006ae:	4b57      	ldr	r3, [pc, #348]	; (800080c <pong_run+0x230>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80006b6:	2b07      	cmp	r3, #7
 80006b8:	f340 8093 	ble.w	80007e2 <pong_run+0x206>
			set_new_state(STATE_RPP1);
 80006bc:	2005      	movs	r0, #5
 80006be:	f7ff feeb 	bl	8000498 <set_new_state>
		break;
 80006c2:	e08e      	b.n	80007e2 <pong_run+0x206>

	/* "Go to P2" state */
	case STATE_GTP2:

		//change state if player 2 push the button before the led went tho the right border
		if (fsm_handle->inputs.nb_press_btn2 >=1 && fsm_handle->controllers.led_index > 0)
 80006c4:	4b51      	ldr	r3, [pc, #324]	; (800080c <pong_run+0x230>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7a5b      	ldrb	r3, [r3, #9]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d009      	beq.n	80006e2 <pong_run+0x106>
 80006ce:	4b4f      	ldr	r3, [pc, #316]	; (800080c <pong_run+0x230>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	dd03      	ble.n	80006e2 <pong_run+0x106>
			set_new_state(STATE_IP1S);
 80006da:	2007      	movs	r0, #7
 80006dc:	f7ff fedc 	bl	8000498 <set_new_state>
		//change state if led touch the right border
		else if (fsm_handle->controllers.led_index < 0)
			set_new_state(STATE_RPP2);

		break;
 80006e0:	e081      	b.n	80007e6 <pong_run+0x20a>
		else if (fsm_handle->controllers.led_index < 0)
 80006e2:	4b4a      	ldr	r3, [pc, #296]	; (800080c <pong_run+0x230>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da7b      	bge.n	80007e6 <pong_run+0x20a>
			set_new_state(STATE_RPP2);
 80006ee:	2006      	movs	r0, #6
 80006f0:	f7ff fed2 	bl	8000498 <set_new_state>
		break;
 80006f4:	e077      	b.n	80007e6 <pong_run+0x20a>

	/* "Reflex press P1" state */
	case STATE_RPP1:
		//wait the led_shift_period before to test if the player pushed the button
		if (fsm_handle->controllers.state_execution_count == fsm_handle->controllers.led_shift_period) {
 80006f6:	4b45      	ldr	r3, [pc, #276]	; (800080c <pong_run+0x230>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <pong_run+0x230>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	429a      	cmp	r2, r3
 8000704:	d171      	bne.n	80007ea <pong_run+0x20e>
			//check if the player pushed his button
			if (fsm_handle->inputs.nb_press_btn1 >= 1)
 8000706:	4b41      	ldr	r3, [pc, #260]	; (800080c <pong_run+0x230>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7a1b      	ldrb	r3, [r3, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <pong_run+0x13c>
				set_new_state(STATE_GTP2);
 8000710:	2004      	movs	r0, #4
 8000712:	f7ff fec1 	bl	8000498 <set_new_state>
			else
				set_new_state(STATE_IP2S);
		}
		break;
 8000716:	e068      	b.n	80007ea <pong_run+0x20e>
				set_new_state(STATE_IP2S);
 8000718:	2008      	movs	r0, #8
 800071a:	f7ff febd 	bl	8000498 <set_new_state>
		break;
 800071e:	e064      	b.n	80007ea <pong_run+0x20e>

	/* "Reflex press P2" state */
	case STATE_RPP2:
		//wait the led_shift_period before to test if the player pushed the button
		if (fsm_handle->controllers.state_execution_count == fsm_handle->controllers.led_shift_period) {
 8000720:	4b3a      	ldr	r3, [pc, #232]	; (800080c <pong_run+0x230>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68da      	ldr	r2, [r3, #12]
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <pong_run+0x230>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	429a      	cmp	r2, r3
 800072e:	d15e      	bne.n	80007ee <pong_run+0x212>
			//check if the player pushed his button
			if (fsm_handle->inputs.nb_press_btn2 >= 1)
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <pong_run+0x230>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7a5b      	ldrb	r3, [r3, #9]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <pong_run+0x166>
				set_new_state(STATE_GTP1);
 800073a:	2003      	movs	r0, #3
 800073c:	f7ff feac 	bl	8000498 <set_new_state>
			else
				set_new_state(STATE_IP1S);
		}
		break;
 8000740:	e055      	b.n	80007ee <pong_run+0x212>
				set_new_state(STATE_IP1S);
 8000742:	2007      	movs	r0, #7
 8000744:	f7ff fea8 	bl	8000498 <set_new_state>
		break;
 8000748:	e051      	b.n	80007ee <pong_run+0x212>

	/* "Increase P1 score" state */
	case STATE_IP1S:

		//wait the duration of the score display
		if (fsm_handle->controllers.state_execution_count == 500000) {
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <pong_run+0x230>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <pong_run+0x234>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d14d      	bne.n	80007f2 <pong_run+0x216>
			//check if the player won
			if (fsm_handle->controllers.p1_score >= MAX_SCORE)
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <pong_run+0x230>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	7d5b      	ldrb	r3, [r3, #21]
 800075c:	2b04      	cmp	r3, #4
 800075e:	d903      	bls.n	8000768 <pong_run+0x18c>
				set_new_state(STATE_P1WN);
 8000760:	2009      	movs	r0, #9
 8000762:	f7ff fe99 	bl	8000498 <set_new_state>
			else
				set_new_state(STATE_WPP2);
		}

		break;
 8000766:	e044      	b.n	80007f2 <pong_run+0x216>
				set_new_state(STATE_WPP2);
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fe95 	bl	8000498 <set_new_state>
		break;
 800076e:	e040      	b.n	80007f2 <pong_run+0x216>

	/* "Increase P2 score" state */
	case STATE_IP2S:

		//wait the duration of the score display
		if (fsm_handle->controllers.state_execution_count == 500000) {
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <pong_run+0x230>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	4a26      	ldr	r2, [pc, #152]	; (8000810 <pong_run+0x234>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d13c      	bne.n	80007f6 <pong_run+0x21a>
			//check if the player won
			if (fsm_handle->controllers.p2_score >= MAX_SCORE)
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <pong_run+0x230>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	7d9b      	ldrb	r3, [r3, #22]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d903      	bls.n	800078e <pong_run+0x1b2>
				set_new_state(STATE_P2WN);
 8000786:	200a      	movs	r0, #10
 8000788:	f7ff fe86 	bl	8000498 <set_new_state>
			else
				set_new_state(STATE_WPP1);
		}

		break;
 800078c:	e033      	b.n	80007f6 <pong_run+0x21a>
				set_new_state(STATE_WPP1);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fe82 	bl	8000498 <set_new_state>
		break;
 8000794:	e02f      	b.n	80007f6 <pong_run+0x21a>

	/* "P1 Wins !" state */
	case STATE_P1WN:

		//wait until any button is pressed
		if (fsm_handle->inputs.nb_press_btn1 >= 1 || fsm_handle->inputs.nb_press_btn2 >= 1)
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <pong_run+0x230>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	7a1b      	ldrb	r3, [r3, #8]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d104      	bne.n	80007aa <pong_run+0x1ce>
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <pong_run+0x230>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	7a5b      	ldrb	r3, [r3, #9]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d027      	beq.n	80007fa <pong_run+0x21e>
			set_new_state(STATE_WPP2);
 80007aa:	2002      	movs	r0, #2
 80007ac:	f7ff fe74 	bl	8000498 <set_new_state>

		break;
 80007b0:	e023      	b.n	80007fa <pong_run+0x21e>

	/* "P1 Wins !" state */
	case STATE_P2WN:

		//wait until any button is pressed
		if (fsm_handle->inputs.nb_press_btn1 >= 1 || fsm_handle->inputs.nb_press_btn2 >= 1)
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <pong_run+0x230>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	7a1b      	ldrb	r3, [r3, #8]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d104      	bne.n	80007c6 <pong_run+0x1ea>
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <pong_run+0x230>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	7a5b      	ldrb	r3, [r3, #9]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d01b      	beq.n	80007fe <pong_run+0x222>
			set_new_state(STATE_WPP1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fe66 	bl	8000498 <set_new_state>

		break;
 80007cc:	e017      	b.n	80007fe <pong_run+0x222>

	default:
		set_new_state(STATE_START);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff fe62 	bl	8000498 <set_new_state>
		break;
 80007d4:	e014      	b.n	8000800 <pong_run+0x224>
		break;
 80007d6:	bf00      	nop
 80007d8:	e012      	b.n	8000800 <pong_run+0x224>
		break;
 80007da:	bf00      	nop
 80007dc:	e010      	b.n	8000800 <pong_run+0x224>
		break;
 80007de:	bf00      	nop
 80007e0:	e00e      	b.n	8000800 <pong_run+0x224>
		break;
 80007e2:	bf00      	nop
 80007e4:	e00c      	b.n	8000800 <pong_run+0x224>
		break;
 80007e6:	bf00      	nop
 80007e8:	e00a      	b.n	8000800 <pong_run+0x224>
		break;
 80007ea:	bf00      	nop
 80007ec:	e008      	b.n	8000800 <pong_run+0x224>
		break;
 80007ee:	bf00      	nop
 80007f0:	e006      	b.n	8000800 <pong_run+0x224>
		break;
 80007f2:	bf00      	nop
 80007f4:	e004      	b.n	8000800 <pong_run+0x224>
		break;
 80007f6:	bf00      	nop
 80007f8:	e002      	b.n	8000800 <pong_run+0x224>
		break;
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <pong_run+0x224>
		break;
 80007fe:	bf00      	nop
	}

	return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000428 	.word	0x20000428
 800080c:	2000042c 	.word	0x2000042c
 8000810:	0007a120 	.word	0x0007a120

08000814 <state_start>:

void state_start(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

	//init variable declaration
	static uint32_t buffer7, cnt;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <state_start+0xb0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11d      	bne.n	800085e <state_start+0x4a>

		//clean the 7segments
		max7219_erase_no_decode();
 8000822:	f001 fa73 	bl	8001d0c <max7219_erase_no_decode>

		//init the timer buffer7
		buffer7 = fsm_handle->controllers.state_execution_count;
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <state_start+0xb0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <state_start+0xb4>)
 800082e:	6013      	str	r3, [r2, #0]

		//init temp counter of the animation
		cnt = 0;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <state_start+0xb8>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]

		//reset scores
		fsm_handle->controllers.p1_score = 0;
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <state_start+0xb0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2200      	movs	r2, #0
 800083c:	755a      	strb	r2, [r3, #21]
		fsm_handle->controllers.p2_score = 0;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <state_start+0xb0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <state_start+0xb0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]

		//set music
		set_music(PACMAN);
 800084e:	2000      	movs	r0, #0
 8000850:	f004 f866 	bl	8004920 <set_music>
		//set_7segment(" P1 ", 1);

		set_interrupt_launcher(MUSIC);
 8000854:	2000      	movs	r0, #0
 8000856:	f003 ff45 	bl	80046e4 <set_interrupt_launcher>
		start_timer();
 800085a:	f003 ff6d 	bl	8004738 <start_timer>
	 *  function to be able to call it with one or several callback functions.
	 *  But I didn't find the solves to my issues during the code writing
	 */

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <state_start+0xb0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	7d1b      	ldrb	r3, [r3, #20]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d12a      	bne.n	80008be <state_start+0xaa>

		/* 7SEGMENT BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than 20000 cycles
		if (fsm_handle->controllers.state_execution_count-buffer7>80000) {
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <state_start+0xb0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <state_start+0xb4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <state_start+0xbc>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d921      	bls.n	80008be <state_start+0xaa>

			//display the message with alternating between nothing and the display
			static uint8_t display_state = 0;

			if (cnt == 6) {
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <state_start+0xb8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b06      	cmp	r3, #6
 8000880:	d103      	bne.n	800088a <state_start+0x76>
				fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <state_start+0xb0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	751a      	strb	r2, [r3, #20]
			}


			if (display_state == 0) {
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <state_start+0xc0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10b      	bne.n	80008aa <state_start+0x96>
				display_on_7segments("HOLA");
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <state_start+0xc4>)
 8000894:	f001 faf6 	bl	8001e84 <display_on_7segments>
				display_state=1;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <state_start+0xc0>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
				cnt++;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <state_start+0xb8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <state_start+0xb8>)
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	e004      	b.n	80008b4 <state_start+0xa0>
			}
			else {
				max7219_erase_no_decode();
 80008aa:	f001 fa2f 	bl	8001d0c <max7219_erase_no_decode>
				display_state=0;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <state_start+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
			}


			//the buffer7 is actualised
			buffer7=fsm_handle->controllers.state_execution_count;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <state_start+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <state_start+0xb4>)
 80008bc:	6013      	str	r3, [r2, #0]

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000042c 	.word	0x2000042c
 80008c8:	20000430 	.word	0x20000430
 80008cc:	20000434 	.word	0x20000434
 80008d0:	00013880 	.word	0x00013880
 80008d4:	20000438 	.word	0x20000438
 80008d8:	080049e0 	.word	0x080049e0

080008dc <state_wpp1>:

void state_wpp1(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	//init variables
	///static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <state_wpp1+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10a      	bne.n	8000900 <state_wpp1+0x24>

		//clean the 7segments
		max7219_erase_no_decode();
 80008ea:	f001 fa0f 	bl	8001d0c <max7219_erase_no_decode>

		//set 7segment display
		set_7segment(" P1 ", 1);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <state_wpp1+0x2c>)
 80008f2:	f001 fa87 	bl	8001e04 <set_7segment>

		//set the callback function of the timer
		set_interrupt_launcher(SEGMENT);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f003 fef4 	bl	80046e4 <set_interrupt_launcher>

		//start the timer
		start_timer();
 80008fc:	f003 ff1c 	bl	8004738 <start_timer>

	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000042c 	.word	0x2000042c
 8000908:	080049e8 	.word	0x080049e8

0800090c <state_wpp2>:

void state_wpp2(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

	//init variables
	///static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <state_wpp2+0x28>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <state_wpp2+0x24>

		//clean the 7segments
		max7219_erase_no_decode();
 800091a:	f001 f9f7 	bl	8001d0c <max7219_erase_no_decode>


		//set the 7segment display
		set_7segment(" P2 ", 1);
 800091e:	2101      	movs	r1, #1
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <state_wpp2+0x2c>)
 8000922:	f001 fa6f 	bl	8001e04 <set_7segment>

		//set the callback function of the timer
		set_interrupt_launcher(SEGMENT);
 8000926:	2001      	movs	r0, #1
 8000928:	f003 fedc 	bl	80046e4 <set_interrupt_launcher>

		//start the timer
		start_timer();
 800092c:	f003 ff04 	bl	8004738 <start_timer>

	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000042c 	.word	0x2000042c
 8000938:	080049f0 	.word	0x080049f0

0800093c <state_gtp1>:

void state_gtp1(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

		//init variables
		static uint32_t bufferL;

		//init functions of the state
		if (fsm_handle->controllers.state_execution_count == 0) {
 8000940:	4b26      	ldr	r3, [pc, #152]	; (80009dc <state_gtp1+0xa0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d11d      	bne.n	8000986 <state_gtp1+0x4a>

			//clean the 7segments
			max7219_erase_no_decode();
 800094a:	f001 f9df 	bl	8001d0c <max7219_erase_no_decode>

			//init the timer bufferof the leds
			bufferL = fsm_handle->controllers.state_execution_count;
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <state_gtp1+0xa0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <state_gtp1+0xa4>)
 8000956:	6013      	str	r3, [r2, #0]

			//clear the leds
			clear_array();
 8000958:	f001 f8e4 	bl	8001b24 <clear_array>
			write_array(1, 1);
 800095c:	2101      	movs	r1, #1
 800095e:	2001      	movs	r0, #1
 8000960:	f001 f8b0 	bl	8001ac4 <write_array>

			//set the led shift period to a variable which increase on each pass
			fsm_handle->controllers.led_shift_period = 80000 - (fsm_handle->controllers.pass_count * 5000);
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <state_gtp1+0xa0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f241 3288 	movw	r2, #5000	; 0x1388
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <state_gtp1+0xa0>)
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	f5c3 339c 	rsb	r3, r3, #79872	; 0x13800
 800097a:	3380      	adds	r3, #128	; 0x80
 800097c:	6193      	str	r3, [r2, #24]

			//set the start led on the right border
			fsm_handle->controllers.led_index = 2;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <state_gtp1+0xa0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2202      	movs	r2, #2
 8000984:	75da      	strb	r2, [r3, #23]
		/* INIT END  ----------------------------------------------------------------------------------*/

		/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

		//check if the animation state is on
		if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <state_gtp1+0xa0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	7d1b      	ldrb	r3, [r3, #20]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d122      	bne.n	80009d6 <state_gtp1+0x9a>

			/* LED BEGIN  ----------------------------------------------------------------------------------*/

			//check if the last animation update happened over than a certain amount of cycles
			if (fsm_handle->controllers.state_execution_count-bufferL > fsm_handle->controllers.led_shift_period) {
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <state_gtp1+0xa0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <state_gtp1+0xa4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1ad2      	subs	r2, r2, r3
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <state_gtp1+0xa0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d917      	bls.n	80009d6 <state_gtp1+0x9a>

				clear_array();
 80009a6:	f001 f8bd 	bl	8001b24 <clear_array>
				write_array(fsm_handle->controllers.led_index, 1);
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <state_gtp1+0xa0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f885 	bl	8001ac4 <write_array>
				fsm_handle->controllers.led_index++;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <state_gtp1+0xa0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f993 2017 	ldrsb.w	r2, [r3, #23]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	3201      	adds	r2, #1
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	b252      	sxtb	r2, r2
 80009ca:	75da      	strb	r2, [r3, #23]

				bufferL=fsm_handle->controllers.state_execution_count;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <state_gtp1+0xa0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <state_gtp1+0xa4>)
 80009d4:	6013      	str	r3, [r2, #0]
			/* LED END  ----------------------------------------------------------------------------------*/

		}

		/* ANIMATION END  ----------------------------------------------------------------------------------*/
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000042c 	.word	0x2000042c
 80009e0:	2000043c 	.word	0x2000043c

080009e4 <state_gtp2>:

void state_gtp2(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

	//init variables
	static uint32_t bufferL;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <state_gtp2+0xa0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d11d      	bne.n	8000a2e <state_gtp2+0x4a>

		//clean the 7segments
		max7219_erase_no_decode();
 80009f2:	f001 f98b 	bl	8001d0c <max7219_erase_no_decode>

		//reinit the timer bufferof the leds
		bufferL = fsm_handle->controllers.state_execution_count;
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <state_gtp2+0xa0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <state_gtp2+0xa4>)
 80009fe:	6013      	str	r3, [r2, #0]

		//clear the leds
		clear_array();
 8000a00:	f001 f890 	bl	8001b24 <clear_array>
		write_array(6, 1);
 8000a04:	2101      	movs	r1, #1
 8000a06:	2006      	movs	r0, #6
 8000a08:	f001 f85c 	bl	8001ac4 <write_array>

		//set the led shift period to a variable which increase on each pass
		fsm_handle->controllers.led_shift_period = 80000 - (fsm_handle->controllers.pass_count * 5000);
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <state_gtp2+0xa0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <state_gtp2+0xa0>)
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	f5c3 339c 	rsb	r3, r3, #79872	; 0x13800
 8000a22:	3380      	adds	r3, #128	; 0x80
 8000a24:	6193      	str	r3, [r2, #24]

		//set the start led on the left border
		fsm_handle->controllers.led_index = 5;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <state_gtp2+0xa0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2205      	movs	r2, #5
 8000a2c:	75da      	strb	r2, [r3, #23]
	/* INIT END  ----------------------------------------------------------------------------------*/

	/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <state_gtp2+0xa0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	7d1b      	ldrb	r3, [r3, #20]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d122      	bne.n	8000a7e <state_gtp2+0x9a>

		/* LED BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than a certain amount of cycles
		if (fsm_handle->controllers.state_execution_count-bufferL > fsm_handle->controllers.led_shift_period) {
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <state_gtp2+0xa0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <state_gtp2+0xa4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1ad2      	subs	r2, r2, r3
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <state_gtp2+0xa0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d917      	bls.n	8000a7e <state_gtp2+0x9a>

			clear_array();
 8000a4e:	f001 f869 	bl	8001b24 <clear_array>
			write_array(fsm_handle->controllers.led_index, 1);
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <state_gtp2+0xa0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 f831 	bl	8001ac4 <write_array>
			fsm_handle->controllers.led_index--;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <state_gtp2+0xa0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f993 2017 	ldrsb.w	r2, [r3, #23]
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	3a01      	subs	r2, #1
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	b252      	sxtb	r2, r2
 8000a72:	75da      	strb	r2, [r3, #23]

			bufferL=fsm_handle->controllers.state_execution_count;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <state_gtp2+0xa0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <state_gtp2+0xa4>)
 8000a7c:	6013      	str	r3, [r2, #0]

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000042c 	.word	0x2000042c
 8000a88:	20000440 	.word	0x20000440

08000a8c <state_rpp1>:

void state_rpp1(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <state_rpp1+0x2c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10c      	bne.n	8000ab4 <state_rpp1+0x28>

		//clean the 7segments
		max7219_erase_no_decode();
 8000a9a:	f001 f937 	bl	8001d0c <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000a9e:	f001 f841 	bl	8001b24 <clear_array>

		//switch on the led border
		write_array(7, 1);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2007      	movs	r0, #7
 8000aa6:	f001 f80d 	bl	8001ac4 <write_array>

		//increment the speed
		fsm_handle->controllers.pass_count++;
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <state_rpp1+0x2c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	3201      	adds	r2, #1
 8000ab2:	61da      	str	r2, [r3, #28]
	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000042c 	.word	0x2000042c

08000abc <state_rpp2>:

void state_rpp2(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <state_rpp2+0x2c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10c      	bne.n	8000ae4 <state_rpp2+0x28>

		//clean the 7segments
		max7219_erase_no_decode();
 8000aca:	f001 f91f 	bl	8001d0c <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000ace:	f001 f829 	bl	8001b24 <clear_array>

		//switch on the led border
		write_array(0, 1);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 fff5 	bl	8001ac4 <write_array>

		//increment the speed
		fsm_handle->controllers.pass_count++;
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <state_rpp2+0x2c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	69da      	ldr	r2, [r3, #28]
 8000ae0:	3201      	adds	r2, #1
 8000ae2:	61da      	str	r2, [r3, #28]
	}

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000042c 	.word	0x2000042c

08000aec <state_ip1s>:

void state_ip1s(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <state_ip1s+0xa0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d145      	bne.n	8000b86 <state_ip1s+0x9a>

		//clean the 7segments
		max7219_erase_no_decode();
 8000afa:	f001 f907 	bl	8001d0c <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000afe:	f001 f811 	bl	8001b24 <clear_array>

		//increment player's score
		fsm_handle->controllers.p1_score++;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <state_ip1s+0xa0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	7d5a      	ldrb	r2, [r3, #21]
 8000b08:	3201      	adds	r2, #1
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	755a      	strb	r2, [r3, #21]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <state_ip1s+0xa0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]

		//display the new score of the winner
		max7219_display_no_decode(0, 0b1100111);
 8000b16:	2167      	movs	r1, #103	; 0x67
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f8b9 	bl	8001c90 <max7219_display_no_decode>
		max7219_display_no_decode(1, 0b0110000);
 8000b1e:	2130      	movs	r1, #48	; 0x30
 8000b20:	2001      	movs	r0, #1
 8000b22:	f001 f8b5 	bl	8001c90 <max7219_display_no_decode>
		max7219_display_no_decode(2, 0b1001);
 8000b26:	2109      	movs	r1, #9
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f001 f8b1 	bl	8001c90 <max7219_display_no_decode>
		switch (fsm_handle->controllers.p1_score) {
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <state_ip1s+0xa0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	7d5b      	ldrb	r3, [r3, #21]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d826      	bhi.n	8000b88 <state_ip1s+0x9c>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <state_ip1s+0x54>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b5f 	.word	0x08000b5f
 8000b48:	08000b69 	.word	0x08000b69
 8000b4c:	08000b73 	.word	0x08000b73
 8000b50:	08000b7d 	.word	0x08000b7d
		case 1: max7219_display_no_decode(3, 0b0110000); break;
 8000b54:	2130      	movs	r1, #48	; 0x30
 8000b56:	2003      	movs	r0, #3
 8000b58:	f001 f89a 	bl	8001c90 <max7219_display_no_decode>
 8000b5c:	e014      	b.n	8000b88 <state_ip1s+0x9c>
		case 2: max7219_display_no_decode(3, 0b1101101); break;
 8000b5e:	216d      	movs	r1, #109	; 0x6d
 8000b60:	2003      	movs	r0, #3
 8000b62:	f001 f895 	bl	8001c90 <max7219_display_no_decode>
 8000b66:	e00f      	b.n	8000b88 <state_ip1s+0x9c>
		case 3: max7219_display_no_decode(3, 0b1111001); break;
 8000b68:	2179      	movs	r1, #121	; 0x79
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f001 f890 	bl	8001c90 <max7219_display_no_decode>
 8000b70:	e00a      	b.n	8000b88 <state_ip1s+0x9c>
		case 4: max7219_display_no_decode(3, 0b0110011); break;
 8000b72:	2133      	movs	r1, #51	; 0x33
 8000b74:	2003      	movs	r0, #3
 8000b76:	f001 f88b 	bl	8001c90 <max7219_display_no_decode>
 8000b7a:	e005      	b.n	8000b88 <state_ip1s+0x9c>
		case 5: max7219_display_no_decode(3, 0b1011011); break;
 8000b7c:	215b      	movs	r1, #91	; 0x5b
 8000b7e:	2003      	movs	r0, #3
 8000b80:	f001 f886 	bl	8001c90 <max7219_display_no_decode>
 8000b84:	e000      	b.n	8000b88 <state_ip1s+0x9c>
		}

	}
 8000b86:	bf00      	nop

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000042c 	.word	0x2000042c

08000b90 <state_ip2s>:

void state_ip2s(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	/* INIT BEGIN  ----------------------------------------------------------------------------------*/

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <state_ip2s+0xa4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d147      	bne.n	8000c2e <state_ip2s+0x9e>

		//clean the 7segments
		max7219_erase_no_decode();
 8000b9e:	f001 f8b5 	bl	8001d0c <max7219_erase_no_decode>
		max7219_erase_decode();
 8000ba2:	f001 f8f1 	bl	8001d88 <max7219_erase_decode>

		//clear the leds
		clear_array();
 8000ba6:	f000 ffbd 	bl	8001b24 <clear_array>

		//increment player's score
		fsm_handle->controllers.p2_score++;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <state_ip2s+0xa4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7d9a      	ldrb	r2, [r3, #22]
 8000bb0:	3201      	adds	r2, #1
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <state_ip2s+0xa4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]


		//display the new score of the winner
		max7219_display_no_decode(0, 0b1100111);
 8000bbe:	2167      	movs	r1, #103	; 0x67
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f001 f865 	bl	8001c90 <max7219_display_no_decode>
		max7219_display_no_decode(1, 0b1101101);
 8000bc6:	216d      	movs	r1, #109	; 0x6d
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f001 f861 	bl	8001c90 <max7219_display_no_decode>
		max7219_display_no_decode(2, 0b1001);
 8000bce:	2109      	movs	r1, #9
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f001 f85d 	bl	8001c90 <max7219_display_no_decode>
		switch (fsm_handle->controllers.p2_score) {
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <state_ip2s+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	7d9b      	ldrb	r3, [r3, #22]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d826      	bhi.n	8000c30 <state_ip2s+0xa0>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <state_ip2s+0x58>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000bfd 	.word	0x08000bfd
 8000bec:	08000c07 	.word	0x08000c07
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c1b 	.word	0x08000c1b
 8000bf8:	08000c25 	.word	0x08000c25
		case 1: max7219_display_no_decode(3, 0b0110000); break;
 8000bfc:	2130      	movs	r1, #48	; 0x30
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f001 f846 	bl	8001c90 <max7219_display_no_decode>
 8000c04:	e014      	b.n	8000c30 <state_ip2s+0xa0>
		case 2: max7219_display_no_decode(3, 0b1101101); break;
 8000c06:	216d      	movs	r1, #109	; 0x6d
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f001 f841 	bl	8001c90 <max7219_display_no_decode>
 8000c0e:	e00f      	b.n	8000c30 <state_ip2s+0xa0>
		case 3: max7219_display_no_decode(3, 0b1111001); break;
 8000c10:	2179      	movs	r1, #121	; 0x79
 8000c12:	2003      	movs	r0, #3
 8000c14:	f001 f83c 	bl	8001c90 <max7219_display_no_decode>
 8000c18:	e00a      	b.n	8000c30 <state_ip2s+0xa0>
		case 4: max7219_display_no_decode(3, 0b0110011); break;
 8000c1a:	2133      	movs	r1, #51	; 0x33
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f001 f837 	bl	8001c90 <max7219_display_no_decode>
 8000c22:	e005      	b.n	8000c30 <state_ip2s+0xa0>
		case 5: max7219_display_no_decode(3, 0b1011011); break;
 8000c24:	215b      	movs	r1, #91	; 0x5b
 8000c26:	2003      	movs	r0, #3
 8000c28:	f001 f832 	bl	8001c90 <max7219_display_no_decode>
 8000c2c:	e000      	b.n	8000c30 <state_ip2s+0xa0>
		}

	}
 8000c2e:	bf00      	nop

	/* INIT END  ----------------------------------------------------------------------------------*/
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000042c 	.word	0x2000042c

08000c38 <state_p1wn>:

void state_p1wn(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

	//init variables
	static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000c3e:	4bb2      	ldr	r3, [pc, #712]	; (8000f08 <state_p1wn+0x2d0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11c      	bne.n	8000c82 <state_p1wn+0x4a>

		//clean the 7segments
		max7219_erase_no_decode();
 8000c48:	f001 f860 	bl	8001d0c <max7219_erase_no_decode>

		//clear the leds
		clear_array();
 8000c4c:	f000 ff6a 	bl	8001b24 <clear_array>

		//init the timer buffer7
		buffer7 = fsm_handle->controllers.state_execution_count;
 8000c50:	4bad      	ldr	r3, [pc, #692]	; (8000f08 <state_p1wn+0x2d0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	4aad      	ldr	r2, [pc, #692]	; (8000f0c <state_p1wn+0x2d4>)
 8000c58:	6013      	str	r3, [r2, #0]

		//reset scores
		fsm_handle->controllers.p1_score = 0;
 8000c5a:	4bab      	ldr	r3, [pc, #684]	; (8000f08 <state_p1wn+0x2d0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	755a      	strb	r2, [r3, #21]
		fsm_handle->controllers.p2_score = 0;
 8000c62:	4ba9      	ldr	r3, [pc, #676]	; (8000f08 <state_p1wn+0x2d0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2200      	movs	r2, #0
 8000c68:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000c6a:	4ba7      	ldr	r3, [pc, #668]	; (8000f08 <state_p1wn+0x2d0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]

		set_music(WIN);
 8000c72:	2004      	movs	r0, #4
 8000c74:	f003 fe54 	bl	8004920 <set_music>
		set_interrupt_launcher(MUSIC);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f003 fd33 	bl	80046e4 <set_interrupt_launcher>
		start_timer();
 8000c7e:	f003 fd5b 	bl	8004738 <start_timer>
	/* INIT END  ----------------------------------------------------------------------------------*/

	/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 8000c82:	4ba1      	ldr	r3, [pc, #644]	; (8000f08 <state_p1wn+0x2d0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	7d1b      	ldrb	r3, [r3, #20]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f040 8139 	bne.w	8000f00 <state_p1wn+0x2c8>

		/* 7SEGMENT BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than 20000 cycles
		if (fsm_handle->controllers.state_execution_count-buffer7>80000) {
 8000c8e:	4b9e      	ldr	r3, [pc, #632]	; (8000f08 <state_p1wn+0x2d0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	4b9d      	ldr	r3, [pc, #628]	; (8000f0c <state_p1wn+0x2d4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	4a9d      	ldr	r2, [pc, #628]	; (8000f10 <state_p1wn+0x2d8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	f240 812f 	bls.w	8000f00 <state_p1wn+0x2c8>

			max7219_erase_no_decode();
 8000ca2:	f001 f833 	bl	8001d0c <max7219_erase_no_decode>

			static uint8_t shift_state = 0;

			//display a message with shifting the letter in order to see the overall message
			for (int i=0;i<4;i++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e113      	b.n	8000ed4 <state_p1wn+0x29c>
				switch (i+shift_state) {
 8000cac:	4b99      	ldr	r3, [pc, #612]	; (8000f14 <state_p1wn+0x2dc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2b1c      	cmp	r3, #28
 8000cb8:	f200 8109 	bhi.w	8000ece <state_p1wn+0x296>
 8000cbc:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <state_p1wn+0x8c>)
 8000cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000d39 	.word	0x08000d39
 8000cc8:	08000d47 	.word	0x08000d47
 8000ccc:	08000d55 	.word	0x08000d55
 8000cd0:	08000d63 	.word	0x08000d63
 8000cd4:	08000d71 	.word	0x08000d71
 8000cd8:	08000d7f 	.word	0x08000d7f
 8000cdc:	08000d8d 	.word	0x08000d8d
 8000ce0:	08000d9b 	.word	0x08000d9b
 8000ce4:	08000da9 	.word	0x08000da9
 8000ce8:	08000db7 	.word	0x08000db7
 8000cec:	08000dc5 	.word	0x08000dc5
 8000cf0:	08000dd3 	.word	0x08000dd3
 8000cf4:	08000de1 	.word	0x08000de1
 8000cf8:	08000def 	.word	0x08000def
 8000cfc:	08000dfd 	.word	0x08000dfd
 8000d00:	08000e0b 	.word	0x08000e0b
 8000d04:	08000e19 	.word	0x08000e19
 8000d08:	08000e27 	.word	0x08000e27
 8000d0c:	08000e35 	.word	0x08000e35
 8000d10:	08000e43 	.word	0x08000e43
 8000d14:	08000e51 	.word	0x08000e51
 8000d18:	08000e5f 	.word	0x08000e5f
 8000d1c:	08000e6d 	.word	0x08000e6d
 8000d20:	08000e7b 	.word	0x08000e7b
 8000d24:	08000e89 	.word	0x08000e89
 8000d28:	08000e97 	.word	0x08000e97
 8000d2c:	08000ea5 	.word	0x08000ea5
 8000d30:	08000eb3 	.word	0x08000eb3
 8000d34:	08000ec1 	.word	0x08000ec1
				case 0: max7219_display_no_decode(i, 0b0); break;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 ffa6 	bl	8001c90 <max7219_display_no_decode>
 8000d44:	e0c3      	b.n	8000ece <state_p1wn+0x296>
				case 1: max7219_display_no_decode(i, 0b0); break;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 ff9f 	bl	8001c90 <max7219_display_no_decode>
 8000d52:	e0bc      	b.n	8000ece <state_p1wn+0x296>
				case 2: max7219_display_no_decode(i, 0b0); break;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 ff98 	bl	8001c90 <max7219_display_no_decode>
 8000d60:	e0b5      	b.n	8000ece <state_p1wn+0x296>
				case 3: max7219_display_no_decode(i, 0b0); break;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 ff91 	bl	8001c90 <max7219_display_no_decode>
 8000d6e:	e0ae      	b.n	8000ece <state_p1wn+0x296>
				case 4: max7219_display_no_decode(i, 0b0010101); break; 	//n
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2115      	movs	r1, #21
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 ff8a 	bl	8001c90 <max7219_display_no_decode>
 8000d7c:	e0a7      	b.n	8000ece <state_p1wn+0x296>
				case 5: max7219_display_no_decode(i, 0b0010000); break; 	//i
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2110      	movs	r1, #16
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 ff83 	bl	8001c90 <max7219_display_no_decode>
 8000d8a:	e0a0      	b.n	8000ece <state_p1wn+0x296>
				case 6: max7219_display_no_decode(i, 0b0001101); break; 	//c
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	210d      	movs	r1, #13
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 ff7c 	bl	8001c90 <max7219_display_no_decode>
 8000d98:	e099      	b.n	8000ece <state_p1wn+0x296>
				case 7: max7219_display_no_decode(i, 0b1001111); break; 	//E
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	214f      	movs	r1, #79	; 0x4f
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 ff75 	bl	8001c90 <max7219_display_no_decode>
 8000da6:	e092      	b.n	8000ece <state_p1wn+0x296>
				case 8: max7219_display_no_decode(i, 0b0); break; 			//
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 ff6e 	bl	8001c90 <max7219_display_no_decode>
 8000db4:	e08b      	b.n	8000ece <state_p1wn+0x296>
				case 9: max7219_display_no_decode(i, 0b1100111); break; 	//P
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2167      	movs	r1, #103	; 0x67
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 ff67 	bl	8001c90 <max7219_display_no_decode>
 8000dc2:	e084      	b.n	8000ece <state_p1wn+0x296>
				case 10: max7219_display_no_decode(i, 0b0001110); break;	//L
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	210e      	movs	r1, #14
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 ff60 	bl	8001c90 <max7219_display_no_decode>
 8000dd0:	e07d      	b.n	8000ece <state_p1wn+0x296>
				case 11: max7219_display_no_decode(i, 0b1110111); break;	//A
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2177      	movs	r1, #119	; 0x77
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 ff59 	bl	8001c90 <max7219_display_no_decode>
 8000dde:	e076      	b.n	8000ece <state_p1wn+0x296>
				case 12: max7219_display_no_decode(i, 0b0100111); break;	//Y
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2127      	movs	r1, #39	; 0x27
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 ff52 	bl	8001c90 <max7219_display_no_decode>
 8000dec:	e06f      	b.n	8000ece <state_p1wn+0x296>
				case 13: max7219_display_no_decode(i, 0b1001111); break;	//E
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	214f      	movs	r1, #79	; 0x4f
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 ff4b 	bl	8001c90 <max7219_display_no_decode>
 8000dfa:	e068      	b.n	8000ece <state_p1wn+0x296>
				case 14: max7219_display_no_decode(i, 0b0000101); break;	//r
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2105      	movs	r1, #5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 ff44 	bl	8001c90 <max7219_display_no_decode>
 8000e08:	e061      	b.n	8000ece <state_p1wn+0x296>
				case 15: max7219_display_no_decode(i, 0b0); break;			//
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 ff3d 	bl	8001c90 <max7219_display_no_decode>
 8000e16:	e05a      	b.n	8000ece <state_p1wn+0x296>
				case 16: max7219_display_no_decode(i, 0b0110000); break;	//1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2130      	movs	r1, #48	; 0x30
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ff36 	bl	8001c90 <max7219_display_no_decode>
 8000e24:	e053      	b.n	8000ece <state_p1wn+0x296>
				case 17: max7219_display_no_decode(i, 0b0); break;			//
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 ff2f 	bl	8001c90 <max7219_display_no_decode>
 8000e32:	e04c      	b.n	8000ece <state_p1wn+0x296>
				case 18: max7219_display_no_decode(i, 0b0100111); break;	//Y
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2127      	movs	r1, #39	; 0x27
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 ff28 	bl	8001c90 <max7219_display_no_decode>
 8000e40:	e045      	b.n	8000ece <state_p1wn+0x296>
				case 19: max7219_display_no_decode(i, 0b0000101); break;	//r
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2105      	movs	r1, #5
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 ff21 	bl	8001c90 <max7219_display_no_decode>
 8000e4e:	e03e      	b.n	8000ece <state_p1wn+0x296>
				case 20: max7219_display_no_decode(i, 0b0); break;			//
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 ff1a 	bl	8001c90 <max7219_display_no_decode>
 8000e5c:	e037      	b.n	8000ece <state_p1wn+0x296>
				case 21: max7219_display_no_decode(i, 0b1001110); break;	//C
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	214e      	movs	r1, #78	; 0x4e
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 ff13 	bl	8001c90 <max7219_display_no_decode>
 8000e6a:	e030      	b.n	8000ece <state_p1wn+0x296>
				case 22: max7219_display_no_decode(i, 0b1111110); break;	//O
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	217e      	movs	r1, #126	; 0x7e
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 ff0c 	bl	8001c90 <max7219_display_no_decode>
 8000e78:	e029      	b.n	8000ece <state_p1wn+0x296>
				case 23: max7219_display_no_decode(i, 0b1111110); break;	//O
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	217e      	movs	r1, #126	; 0x7e
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 ff05 	bl	8001c90 <max7219_display_no_decode>
 8000e86:	e022      	b.n	8000ece <state_p1wn+0x296>
				case 24: max7219_display_no_decode(i, 0b0001110); break;	//L
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	210e      	movs	r1, #14
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fefe 	bl	8001c90 <max7219_display_no_decode>
 8000e94:	e01b      	b.n	8000ece <state_p1wn+0x296>
				case 25: max7219_display_no_decode(i, 0b0); break;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fef7 	bl	8001c90 <max7219_display_no_decode>
 8000ea2:	e014      	b.n	8000ece <state_p1wn+0x296>
				case 26: max7219_display_no_decode(i, 0b0); break;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fef0 	bl	8001c90 <max7219_display_no_decode>
 8000eb0:	e00d      	b.n	8000ece <state_p1wn+0x296>
				case 27: max7219_display_no_decode(i, 0b0); break;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fee9 	bl	8001c90 <max7219_display_no_decode>
 8000ebe:	e006      	b.n	8000ece <state_p1wn+0x296>
				case 28: max7219_display_no_decode(i, 0b0); break;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fee2 	bl	8001c90 <max7219_display_no_decode>
 8000ecc:	bf00      	nop
			for (int i=0;i<4;i++) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	f77f aee8 	ble.w	8000cac <state_p1wn+0x74>
				}
			}
			shift_state++;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <state_p1wn+0x2dc>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <state_p1wn+0x2dc>)
 8000ee6:	701a      	strb	r2, [r3, #0]

			if (shift_state+3 > 28)
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <state_p1wn+0x2dc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b19      	cmp	r3, #25
 8000eee:	d902      	bls.n	8000ef6 <state_p1wn+0x2be>
				shift_state = 0;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <state_p1wn+0x2dc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

			//the buffer7 is actualised
			buffer7=fsm_handle->controllers.state_execution_count;
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <state_p1wn+0x2d0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <state_p1wn+0x2d4>)
 8000efe:	6013      	str	r3, [r2, #0]
		/* 7SEGMENT END  ----------------------------------------------------------------------------------*/

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000042c 	.word	0x2000042c
 8000f0c:	20000444 	.word	0x20000444
 8000f10:	00013880 	.word	0x00013880
 8000f14:	20000448 	.word	0x20000448

08000f18 <state_p2wn>:

void state_p2wn(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

	//init variables
	static uint32_t buffer7;

	//init functions of the state
	if (fsm_handle->controllers.state_execution_count == 0) {
 8000f1e:	4bb3      	ldr	r3, [pc, #716]	; (80011ec <state_p2wn+0x2d4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d11e      	bne.n	8000f66 <state_p2wn+0x4e>

		//clean the 7segments
		max7219_erase_no_decode();
 8000f28:	f000 fef0 	bl	8001d0c <max7219_erase_no_decode>
		max7219_erase_decode();
 8000f2c:	f000 ff2c 	bl	8001d88 <max7219_erase_decode>

		//clear the leds
		clear_array();
 8000f30:	f000 fdf8 	bl	8001b24 <clear_array>

		//init the timer buffer7
		buffer7 = fsm_handle->controllers.state_execution_count;
 8000f34:	4bad      	ldr	r3, [pc, #692]	; (80011ec <state_p2wn+0x2d4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	4aad      	ldr	r2, [pc, #692]	; (80011f0 <state_p2wn+0x2d8>)
 8000f3c:	6013      	str	r3, [r2, #0]

		//reset scores
		fsm_handle->controllers.p1_score = 0;
 8000f3e:	4bab      	ldr	r3, [pc, #684]	; (80011ec <state_p2wn+0x2d4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	755a      	strb	r2, [r3, #21]
		fsm_handle->controllers.p2_score = 0;
 8000f46:	4ba9      	ldr	r3, [pc, #676]	; (80011ec <state_p2wn+0x2d4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	759a      	strb	r2, [r3, #22]

		//reset pass count
		fsm_handle->controllers.pass_count = 0;
 8000f4e:	4ba7      	ldr	r3, [pc, #668]	; (80011ec <state_p2wn+0x2d4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]

		set_music(WIN);
 8000f56:	2004      	movs	r0, #4
 8000f58:	f003 fce2 	bl	8004920 <set_music>
		set_interrupt_launcher(MUSIC);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f003 fbc1 	bl	80046e4 <set_interrupt_launcher>
		start_timer();
 8000f62:	f003 fbe9 	bl	8004738 <start_timer>
	/* INIT END  ----------------------------------------------------------------------------------*/

	/* ANIMATION BEGIN  ----------------------------------------------------------------------------------*/

	//check if the animation state is on
	if (fsm_handle->controllers.animation_state == ANIMATION_RUNNING) {
 8000f66:	4ba1      	ldr	r3, [pc, #644]	; (80011ec <state_p2wn+0x2d4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	7d1b      	ldrb	r3, [r3, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f040 8139 	bne.w	80011e4 <state_p2wn+0x2cc>

		/* 7SEGMENT BEGIN  ----------------------------------------------------------------------------------*/

		//check if the last animation update happened over than 20000 cycles
		if (fsm_handle->controllers.state_execution_count-buffer7>80000) {
 8000f72:	4b9e      	ldr	r3, [pc, #632]	; (80011ec <state_p2wn+0x2d4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	4b9d      	ldr	r3, [pc, #628]	; (80011f0 <state_p2wn+0x2d8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	4a9d      	ldr	r2, [pc, #628]	; (80011f4 <state_p2wn+0x2dc>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	f240 812f 	bls.w	80011e4 <state_p2wn+0x2cc>


			max7219_erase_no_decode();
 8000f86:	f000 fec1 	bl	8001d0c <max7219_erase_no_decode>

			static uint8_t shift_state = 0;

			//display a message with shifting the letter in order to see the overall message
			for (int i=0;i<4;i++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	e113      	b.n	80011b8 <state_p2wn+0x2a0>
				switch (i+shift_state) {
 8000f90:	4b99      	ldr	r3, [pc, #612]	; (80011f8 <state_p2wn+0x2e0>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	2b1c      	cmp	r3, #28
 8000f9c:	f200 8109 	bhi.w	80011b2 <state_p2wn+0x29a>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <state_p2wn+0x90>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	0800101d 	.word	0x0800101d
 8000fac:	0800102b 	.word	0x0800102b
 8000fb0:	08001039 	.word	0x08001039
 8000fb4:	08001047 	.word	0x08001047
 8000fb8:	08001055 	.word	0x08001055
 8000fbc:	08001063 	.word	0x08001063
 8000fc0:	08001071 	.word	0x08001071
 8000fc4:	0800107f 	.word	0x0800107f
 8000fc8:	0800108d 	.word	0x0800108d
 8000fcc:	0800109b 	.word	0x0800109b
 8000fd0:	080010a9 	.word	0x080010a9
 8000fd4:	080010b7 	.word	0x080010b7
 8000fd8:	080010c5 	.word	0x080010c5
 8000fdc:	080010d3 	.word	0x080010d3
 8000fe0:	080010e1 	.word	0x080010e1
 8000fe4:	080010ef 	.word	0x080010ef
 8000fe8:	080010fd 	.word	0x080010fd
 8000fec:	0800110b 	.word	0x0800110b
 8000ff0:	08001119 	.word	0x08001119
 8000ff4:	08001127 	.word	0x08001127
 8000ff8:	08001135 	.word	0x08001135
 8000ffc:	08001143 	.word	0x08001143
 8001000:	08001151 	.word	0x08001151
 8001004:	0800115f 	.word	0x0800115f
 8001008:	0800116d 	.word	0x0800116d
 800100c:	0800117b 	.word	0x0800117b
 8001010:	08001189 	.word	0x08001189
 8001014:	08001197 	.word	0x08001197
 8001018:	080011a5 	.word	0x080011a5
				case 0: max7219_display_no_decode(i, 0b0); break;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fe34 	bl	8001c90 <max7219_display_no_decode>
 8001028:	e0c3      	b.n	80011b2 <state_p2wn+0x29a>
				case 1: max7219_display_no_decode(i, 0b0); break;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fe2d 	bl	8001c90 <max7219_display_no_decode>
 8001036:	e0bc      	b.n	80011b2 <state_p2wn+0x29a>
				case 2: max7219_display_no_decode(i, 0b0); break;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fe26 	bl	8001c90 <max7219_display_no_decode>
 8001044:	e0b5      	b.n	80011b2 <state_p2wn+0x29a>
				case 3: max7219_display_no_decode(i, 0b0); break;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fe1f 	bl	8001c90 <max7219_display_no_decode>
 8001052:	e0ae      	b.n	80011b2 <state_p2wn+0x29a>
				case 4: max7219_display_no_decode(i, 0b0010101); break; 	//n
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2115      	movs	r1, #21
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fe18 	bl	8001c90 <max7219_display_no_decode>
 8001060:	e0a7      	b.n	80011b2 <state_p2wn+0x29a>
				case 5: max7219_display_no_decode(i, 0b0010000); break; 	//i
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2110      	movs	r1, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fe11 	bl	8001c90 <max7219_display_no_decode>
 800106e:	e0a0      	b.n	80011b2 <state_p2wn+0x29a>
				case 6: max7219_display_no_decode(i, 0b0001101); break; 	//c
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	210d      	movs	r1, #13
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fe0a 	bl	8001c90 <max7219_display_no_decode>
 800107c:	e099      	b.n	80011b2 <state_p2wn+0x29a>
				case 7: max7219_display_no_decode(i, 0b1001111); break; 	//E
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	214f      	movs	r1, #79	; 0x4f
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fe03 	bl	8001c90 <max7219_display_no_decode>
 800108a:	e092      	b.n	80011b2 <state_p2wn+0x29a>
				case 8: max7219_display_no_decode(i, 0b0); break; 			//
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fdfc 	bl	8001c90 <max7219_display_no_decode>
 8001098:	e08b      	b.n	80011b2 <state_p2wn+0x29a>
				case 9: max7219_display_no_decode(i, 0b1100111); break; 	//P
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2167      	movs	r1, #103	; 0x67
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fdf5 	bl	8001c90 <max7219_display_no_decode>
 80010a6:	e084      	b.n	80011b2 <state_p2wn+0x29a>
				case 10: max7219_display_no_decode(i, 0b0001110); break;	//L
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	210e      	movs	r1, #14
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fdee 	bl	8001c90 <max7219_display_no_decode>
 80010b4:	e07d      	b.n	80011b2 <state_p2wn+0x29a>
				case 11: max7219_display_no_decode(i, 0b1110111); break;	//A
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2177      	movs	r1, #119	; 0x77
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fde7 	bl	8001c90 <max7219_display_no_decode>
 80010c2:	e076      	b.n	80011b2 <state_p2wn+0x29a>
				case 12: max7219_display_no_decode(i, 0b0100111); break;	//Y
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2127      	movs	r1, #39	; 0x27
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fde0 	bl	8001c90 <max7219_display_no_decode>
 80010d0:	e06f      	b.n	80011b2 <state_p2wn+0x29a>
				case 13: max7219_display_no_decode(i, 0b1001111); break;	//E
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	214f      	movs	r1, #79	; 0x4f
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fdd9 	bl	8001c90 <max7219_display_no_decode>
 80010de:	e068      	b.n	80011b2 <state_p2wn+0x29a>
				case 14: max7219_display_no_decode(i, 0b0000101); break;	//r
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2105      	movs	r1, #5
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fdd2 	bl	8001c90 <max7219_display_no_decode>
 80010ec:	e061      	b.n	80011b2 <state_p2wn+0x29a>
				case 15: max7219_display_no_decode(i, 0b0); break;			//
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fdcb 	bl	8001c90 <max7219_display_no_decode>
 80010fa:	e05a      	b.n	80011b2 <state_p2wn+0x29a>
				case 16: max7219_display_no_decode(i, 0b0110000); break;	//1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2130      	movs	r1, #48	; 0x30
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fdc4 	bl	8001c90 <max7219_display_no_decode>
 8001108:	e053      	b.n	80011b2 <state_p2wn+0x29a>
				case 17: max7219_display_no_decode(i, 0b0); break;			//
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fdbd 	bl	8001c90 <max7219_display_no_decode>
 8001116:	e04c      	b.n	80011b2 <state_p2wn+0x29a>
				case 18: max7219_display_no_decode(i, 0b0100111); break;	//Y
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2127      	movs	r1, #39	; 0x27
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fdb6 	bl	8001c90 <max7219_display_no_decode>
 8001124:	e045      	b.n	80011b2 <state_p2wn+0x29a>
				case 19: max7219_display_no_decode(i, 0b0000101); break;	//r
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2105      	movs	r1, #5
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fdaf 	bl	8001c90 <max7219_display_no_decode>
 8001132:	e03e      	b.n	80011b2 <state_p2wn+0x29a>
				case 20: max7219_display_no_decode(i, 0b0); break;			//
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fda8 	bl	8001c90 <max7219_display_no_decode>
 8001140:	e037      	b.n	80011b2 <state_p2wn+0x29a>
				case 21: max7219_display_no_decode(i, 0b1001110); break;	//C
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	214e      	movs	r1, #78	; 0x4e
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fda1 	bl	8001c90 <max7219_display_no_decode>
 800114e:	e030      	b.n	80011b2 <state_p2wn+0x29a>
				case 22: max7219_display_no_decode(i, 0b1111110); break;	//O
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	217e      	movs	r1, #126	; 0x7e
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fd9a 	bl	8001c90 <max7219_display_no_decode>
 800115c:	e029      	b.n	80011b2 <state_p2wn+0x29a>
				case 23: max7219_display_no_decode(i, 0b1111110); break;	//O
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	217e      	movs	r1, #126	; 0x7e
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd93 	bl	8001c90 <max7219_display_no_decode>
 800116a:	e022      	b.n	80011b2 <state_p2wn+0x29a>
				case 24: max7219_display_no_decode(i, 0b0001110); break;	//L
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	210e      	movs	r1, #14
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fd8c 	bl	8001c90 <max7219_display_no_decode>
 8001178:	e01b      	b.n	80011b2 <state_p2wn+0x29a>
				case 25: max7219_display_no_decode(i, 0b0); break;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fd85 	bl	8001c90 <max7219_display_no_decode>
 8001186:	e014      	b.n	80011b2 <state_p2wn+0x29a>
				case 26: max7219_display_no_decode(i, 0b0); break;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fd7e 	bl	8001c90 <max7219_display_no_decode>
 8001194:	e00d      	b.n	80011b2 <state_p2wn+0x29a>
				case 27: max7219_display_no_decode(i, 0b0); break;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fd77 	bl	8001c90 <max7219_display_no_decode>
 80011a2:	e006      	b.n	80011b2 <state_p2wn+0x29a>
				case 28: max7219_display_no_decode(i, 0b0); break;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fd70 	bl	8001c90 <max7219_display_no_decode>
 80011b0:	bf00      	nop
			for (int i=0;i<4;i++) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3301      	adds	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	f77f aee8 	ble.w	8000f90 <state_p2wn+0x78>
				}
			}
			shift_state++;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <state_p2wn+0x2e0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <state_p2wn+0x2e0>)
 80011ca:	701a      	strb	r2, [r3, #0]

			if (shift_state+3 > 28)
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <state_p2wn+0x2e0>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b19      	cmp	r3, #25
 80011d2:	d902      	bls.n	80011da <state_p2wn+0x2c2>
				shift_state = 0;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <state_p2wn+0x2e0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]

			//the buffer7 is actualised
			buffer7=fsm_handle->controllers.state_execution_count;
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <state_p2wn+0x2d4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <state_p2wn+0x2d8>)
 80011e2:	6013      	str	r3, [r2, #0]
		/* 7SEGMENT END  ----------------------------------------------------------------------------------*/

	}

	/* ANIMATION END  ----------------------------------------------------------------------------------*/
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000042c 	.word	0x2000042c
 80011f0:	2000044c 	.word	0x2000044c
 80011f4:	00013880 	.word	0x00013880
 80011f8:	20000450 	.word	0x20000450

080011fc <HAL_GPIO_EXTI_Callback>:

//button callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]

	//check the button pushed
	if (GPIO_Pin == BTN1_Pin) {
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800120c:	d106      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0x20>

		//increment the push_nb of this button
		fsm_handle->inputs.nb_press_btn1++;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_GPIO_EXTI_Callback+0x40>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	7a1a      	ldrb	r2, [r3, #8]
 8001214:	3201      	adds	r2, #1
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	721a      	strb	r2, [r3, #8]
	else if (GPIO_Pin == BTN2_Pin) {

		//increment the push_nb of this button
		fsm_handle->inputs.nb_press_btn2++;
	}
}
 800121a:	e009      	b.n	8001230 <HAL_GPIO_EXTI_Callback+0x34>
	else if (GPIO_Pin == BTN2_Pin) {
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001222:	d105      	bne.n	8001230 <HAL_GPIO_EXTI_Callback+0x34>
		fsm_handle->inputs.nb_press_btn2++;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_GPIO_EXTI_Callback+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	7a5a      	ldrb	r2, [r3, #9]
 800122a:	3201      	adds	r2, #1
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	725a      	strb	r2, [r3, #9]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000042c 	.word	0x2000042c

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b0c2      	sub	sp, #264	; 0x108
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TypeDef_LED_Array array_1 = {
 8001246:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
		(TypeDef_LED [8]){
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <main+0xe8>)
 8001254:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8001258:	461d      	mov	r5, r3
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800126a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TypeDef_LED_Array array_1 = {
 800126e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001276:	2308      	movs	r3, #8
 8001278:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			{L7_GPIO_Port, L7_Pin},
			{L8_GPIO_Port, L8_Pin}},
		8
	};

	MAX7219_Handle_TypeDef max7219_handle = {
 800127c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <main+0xec>)
 800128e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <main+0xf0>)
 8001294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 80012a0:	2304      	movs	r3, #4
 80012a2:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
			4,
	};

	TypeDef_Music_Handler music_handler;

	music_handler.htim = &htim3;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <main+0xf4>)
 80012a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	TypeDef_Timer_Handler timer_handler;

	timer_handler.htim = &htim4;
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <main+0xf8>)
 80012ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	Pong_Handle_TypeDef pong_handler = {
 80012b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80012ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80012bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012c0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80012c4:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	6023      	str	r3, [r4, #0]
 80012d0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80012d4:	f107 0594 	add.w	r5, r7, #148	; 0x94
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	6023      	str	r3, [r4, #0]
 80012e0:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80012e4:	f107 0578 	add.w	r5, r7, #120	; 0x78
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f000 ff52 	bl	800219c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f820 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f000 f95c 	bl	80015b8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001300:	f000 f8a0 	bl	8001444 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001304:	f000 f868 	bl	80013d8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001308:	f000 f8f2 	bl	80014f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  ///////////////////////////////////////////////////////	PONG

  pong_init(&pong_handler, &fsm_handler);
 800130c:	463a      	mov	r2, r7
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8f5 	bl	8000504 <pong_init>

  ///////////////////////////////////////////////////////	MUSIC

  //init buzzer clock
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800131a:	2104      	movs	r1, #4
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <main+0xf4>)
 800131e:	f002 fb43 	bl	80039a8 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	pong_run();
 8001322:	f7ff f95b 	bl	80005dc <pong_run>
 8001326:	e7fc      	b.n	8001322 <main+0xe2>
 8001328:	080049f8 	.word	0x080049f8
 800132c:	20000454 	.word	0x20000454
 8001330:	40020000 	.word	0x40020000
 8001334:	200004ac 	.word	0x200004ac
 8001338:	200004ec 	.word	0x200004ec

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b092      	sub	sp, #72	; 0x48
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2234      	movs	r2, #52	; 0x34
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fb34 	bl	80049b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <SystemClock_Config+0x98>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <SystemClock_Config+0x98>)
 8001368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800136c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136e:	2302      	movs	r3, #2
 8001370:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001376:	2310      	movs	r3, #16
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800137e:	2300      	movs	r3, #0
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001382:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001388:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4618      	mov	r0, r3
 8001394:	f001 f9d6 	bl	8002744 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800139e:	f000 f994 	bl	80016ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2303      	movs	r3, #3
 80013a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 fcf2 	bl	8002da4 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013c6:	f000 f980 	bl	80016ca <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3748      	adds	r7, #72	; 0x48
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40007000 	.word	0x40007000

080013d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_SPI1_Init+0x64>)
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <MX_SPI1_Init+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI1_Init+0x64>)
 80013e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI1_Init+0x64>)
 80013f8:	2202      	movs	r2, #2
 80013fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI1_Init+0x64>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI1_Init+0x64>)
 800140c:	2208      	movs	r2, #8
 800140e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI1_Init+0x64>)
 8001424:	220a      	movs	r2, #10
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_SPI1_Init+0x64>)
 800142a:	f001 ff5b 	bl	80032e4 <HAL_SPI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001434:	f000 f949 	bl	80016ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000454 	.word	0x20000454
 8001440:	40013000 	.word	0x40013000

08001444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001454:	463b      	mov	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <MX_TIM3_Init+0xa4>)
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <MX_TIM3_Init+0xa8>)
 8001464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM3_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_TIM3_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM3_Init+0xa4>)
 8001474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001478:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_TIM3_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_TIM3_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001486:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM3_Init+0xa4>)
 8001488:	f002 fa4e 	bl	8003928 <HAL_TIM_PWM_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 f91a 	bl	80016ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	4810      	ldr	r0, [pc, #64]	; (80014e8 <MX_TIM3_Init+0xa4>)
 80014a6:	f003 f887 	bl	80045b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014b0:	f000 f90b 	bl	80016ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b4:	2360      	movs	r3, #96	; 0x60
 80014b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM3_Init+0xa4>)
 80014cc:	f002 fbde 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014d6:	f000 f8f8 	bl	80016ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM3_Init+0xa4>)
 80014dc:	f000 f9b0 	bl	8001840 <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200004ac 	.word	0x200004ac
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <MX_TIM4_Init+0xc0>)
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <MX_TIM4_Init+0xc4>)
 8001520:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <MX_TIM4_Init+0xc0>)
 8001524:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001528:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MX_TIM4_Init+0xc0>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_TIM4_Init+0xc0>)
 8001532:	2263      	movs	r2, #99	; 0x63
 8001534:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <MX_TIM4_Init+0xc0>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_TIM4_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001542:	481b      	ldr	r0, [pc, #108]	; (80015b0 <MX_TIM4_Init+0xc0>)
 8001544:	f002 f95e 	bl	8003804 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800154e:	f000 f8bc 	bl	80016ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4619      	mov	r1, r3
 800155e:	4814      	ldr	r0, [pc, #80]	; (80015b0 <MX_TIM4_Init+0xc0>)
 8001560:	f002 fc52 	bl	8003e08 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800156a:	f000 f8ae 	bl	80016ca <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM4_Init+0xc0>)
 800157e:	f002 fd07 	bl	8003f90 <HAL_TIM_SlaveConfigSynchro>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001588:	f000 f89f 	bl	80016ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM4_Init+0xc0>)
 800159a:	f003 f80d 	bl	80045b8 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80015a4:	f000 f891 	bl	80016ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	; 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200004ec 	.word	0x200004ec
 80015b4:	40000800 	.word	0x40000800

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <MX_GPIO_Init+0xe8>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a33      	ldr	r2, [pc, #204]	; (80016a0 <MX_GPIO_Init+0xe8>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <MX_GPIO_Init+0xe8>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <MX_GPIO_Init+0xe8>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a2d      	ldr	r2, [pc, #180]	; (80016a0 <MX_GPIO_Init+0xe8>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <MX_GPIO_Init+0xe8>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <MX_GPIO_Init+0xe8>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <MX_GPIO_Init+0xe8>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <MX_GPIO_Init+0xe8>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_Pin|L2_Pin|L3_Pin|L4_Pin
 8001616:	2200      	movs	r2, #0
 8001618:	f64f 4106 	movw	r1, #64518	; 0xfc06
 800161c:	4821      	ldr	r0, [pc, #132]	; (80016a4 <MX_GPIO_Init+0xec>)
 800161e:	f001 f861 	bl	80026e4 <HAL_GPIO_WritePin>
                          |L5_Pin|L6_Pin|L7_Pin|L8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001628:	481f      	ldr	r0, [pc, #124]	; (80016a8 <MX_GPIO_Init+0xf0>)
 800162a:	f001 f85b 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L1_Pin L2_Pin L3_Pin L4_Pin
                           L5_Pin L6_Pin L7_Pin L8_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin|L4_Pin
 800162e:	f64f 4306 	movw	r3, #64518	; 0xfc06
 8001632:	60fb      	str	r3, [r7, #12]
                          |L5_Pin|L6_Pin|L7_Pin|L8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	4619      	mov	r1, r3
 8001646:	4817      	ldr	r0, [pc, #92]	; (80016a4 <MX_GPIO_Init+0xec>)
 8001648:	f000 febc 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800164c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MX_GPIO_Init+0xf0>)
 8001666:	f000 fead 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800166a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800166e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001670:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4619      	mov	r1, r3
 8001680:	4809      	ldr	r0, [pc, #36]	; (80016a8 <MX_GPIO_Init+0xf0>)
 8001682:	f000 fe9f 	bl	80023c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2028      	movs	r0, #40	; 0x28
 800168c:	f000 fe6f 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001690:	2028      	movs	r0, #40	; 0x28
 8001692:	f000 fe88 	bl	80023a6 <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020000 	.word	0x40020000

080016ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016bc:	d101      	bne.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016be:	f000 fd85 	bl	80021cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ce:	b672      	cpsid	i
}
 80016d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <Error_Handler+0x8>

080016d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_MspInit+0x58>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <HAL_MspInit+0x58>)
 80016e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016e4:	6253      	str	r3, [r2, #36]	; 0x24
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_MspInit+0x58>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_MspInit+0x58>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_MspInit+0x58>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_MspInit+0x58>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_MspInit+0x58>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_MspInit+0x58>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6253      	str	r3, [r2, #36]	; 0x24
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_MspInit+0x58>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_SPI_MspInit+0x7c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d127      	bne.n	80017a2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_SPI_MspInit+0x80>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <HAL_SPI_MspInit+0x80>)
 8001758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_SPI_MspInit+0x80>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_SPI_MspInit+0x80>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_SPI_MspInit+0x80>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_SPI_MspInit+0x80>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001782:	23a0      	movs	r3, #160	; 0xa0
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001792:	2305      	movs	r3, #5
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_SPI_MspInit+0x84>)
 800179e:	f000 fe11 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40013000 	.word	0x40013000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000

080017b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_TIM_PWM_MspInit+0x34>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10b      	bne.n	80017e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_PWM_MspInit+0x38>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_TIM_PWM_MspInit+0x38>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6253      	str	r3, [r2, #36]	; 0x24
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_TIM_PWM_MspInit+0x38>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_TIM_Base_MspInit+0x44>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d113      	bne.n	800182e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_TIM_Base_MspInit+0x48>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_TIM_Base_MspInit+0x48>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6253      	str	r3, [r2, #36]	; 0x24
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_TIM_Base_MspInit+0x48>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	201e      	movs	r0, #30
 8001824:	f000 fda3 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001828:	201e      	movs	r0, #30
 800182a:	f000 fdbc 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40000800 	.word	0x40000800
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_TIM_MspPostInit+0x64>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11b      	bne.n	800189a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_TIM_MspPostInit+0x68>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_TIM_MspPostInit+0x68>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_TIM_MspPostInit+0x68>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800188a:	2302      	movs	r3, #2
 800188c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_TIM_MspPostInit+0x6c>)
 8001896:	f000 fd95 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020800 	.word	0x40020800

080018b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_InitTick+0xe4>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	4a32      	ldr	r2, [pc, #200]	; (8001994 <HAL_InitTick+0xe4>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6253      	str	r3, [r2, #36]	; 0x24
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_InitTick+0xe4>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018de:	f107 0210 	add.w	r2, r7, #16
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fc6b 	bl	80031c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d103      	bne.n	8001900 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018f8:	f001 fc50 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80018fc:	6378      	str	r0, [r7, #52]	; 0x34
 80018fe:	e004      	b.n	800190a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001900:	f001 fc4c 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8001904:	4603      	mov	r3, r0
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190c:	4a22      	ldr	r2, [pc, #136]	; (8001998 <HAL_InitTick+0xe8>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	3b01      	subs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_InitTick+0xec>)
 800191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_InitTick+0xec>)
 8001922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001926:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_InitTick+0xec>)
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_InitTick+0xec>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_InitTick+0xec>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800193a:	4818      	ldr	r0, [pc, #96]	; (800199c <HAL_InitTick+0xec>)
 800193c:	f001 ff62 	bl	8003804 <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800194a:	2b00      	cmp	r3, #0
 800194c:	d11b      	bne.n	8001986 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800194e:	4813      	ldr	r0, [pc, #76]	; (800199c <HAL_InitTick+0xec>)
 8001950:	f001 ff98 	bl	8003884 <HAL_TIM_Base_Start_IT>
 8001954:	4603      	mov	r3, r0
 8001956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800195a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800195e:	2b00      	cmp	r3, #0
 8001960:	d111      	bne.n	8001986 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001962:	201c      	movs	r0, #28
 8001964:	f000 fd1f 	bl	80023a6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	d808      	bhi.n	8001980 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800196e:	2200      	movs	r2, #0
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	201c      	movs	r0, #28
 8001974:	f000 fcfb 	bl	800236e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001978:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_InitTick+0xf0>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e002      	b.n	8001986 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800198a:	4618      	mov	r0, r3
 800198c:	3738      	adds	r7, #56	; 0x38
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	431bde83 	.word	0x431bde83
 800199c:	2000052c 	.word	0x2000052c
 80019a0:	20000068 	.word	0x20000068

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
	...

080019f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM2_IRQHandler+0x10>)
 80019fa:	f002 f86b 	bl	8003ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000052c 	.word	0x2000052c

08001a08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <TIM4_IRQHandler+0x14>)
 8001a0e:	f002 f861 	bl	8003ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  timer_interrupt();
 8001a12:	f002 fe2f 	bl	8004674 <timer_interrupt>

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200004ec 	.word	0x200004ec

08001a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001a24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a28:	f000 fe74 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001a2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a30:	f000 fe70 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a46:	490d      	ldr	r1, [pc, #52]	; (8001a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a5c:	4c0a      	ldr	r4, [pc, #40]	; (8001a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a6a:	f7ff ffe5 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f002 ff7f 	bl	8004970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a72:	f7ff fbe5 	bl	8001240 <main>
  bx lr
 8001a76:	4770      	bx	lr
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 8001a80:	08004ab8 	.word	0x08004ab8
  ldr r2, =_sbss
 8001a84:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 8001a88:	20000584 	.word	0x20000584

08001a8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_IRQHandler>
	...

08001a90 <led_array_init>:
 * @brief Initialize LED array from parameters
 * @param _led_array Sructure containing LED array and array size
 * @retval HAL status
 */
HAL_StatusTypeDef led_array_init(TypeDef_LED_Array *_led_array)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	// Attribute led param
	led_array = _led_array;
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <led_array_init+0x30>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]

	led_array->interrupt_state = 0;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <led_array_init+0x30>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	721a      	strb	r2, [r3, #8]

	CHECK_LED_PARAMS();
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <led_array_init+0x30>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <led_array_init+0x22>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <led_array_init+0x24>

	return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2000056c 	.word	0x2000056c

08001ac4 <write_array>:
 * 		- GPIO_PIN_SET
 * 		- GPIO_PIN_RESET
 * @retval HAL status
 */
HAL_StatusTypeDef write_array(int _led_index, GPIO_PinState _state)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
	CHECK_LED_PARAMS();
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <write_array+0x5c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <write_array+0x18>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e01d      	b.n	8001b18 <write_array+0x54>

	// Check led index
	if ((_led_index < 0) || (_led_index >= led_array->array_sz))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db05      	blt.n	8001aee <write_array+0x2a>
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <write_array+0x5c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d801      	bhi.n	8001af2 <write_array+0x2e>
		return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e012      	b.n	8001b18 <write_array+0x54>

	// Write pin state to led index
	HAL_GPIO_WritePin(led_array->array[_led_index].port, led_array->array[_led_index].pin, _state);
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <write_array+0x5c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <write_array+0x5c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	889b      	ldrh	r3, [r3, #4]
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f000 fde7 	bl	80026e4 <HAL_GPIO_WritePin>

	return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000056c 	.word	0x2000056c

08001b24 <clear_array>:

HAL_StatusTypeDef clear_array(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
	CHECK_LED_PARAMS();
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <clear_array+0x3c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <clear_array+0x12>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e010      	b.n	8001b58 <clear_array+0x34>

	// Clear LED array
	for (int i = 0; i < led_array->array_sz; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	e006      	b.n	8001b4a <clear_array+0x26>
	{
		write_array(i, GPIO_PIN_RESET);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffc0 	bl	8001ac4 <write_array>
	for (int i = 0; i < led_array->array_sz; i++)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3301      	adds	r3, #1
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <clear_array+0x3c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d8f2      	bhi.n	8001b3c <clear_array+0x18>
	}

	return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000056c 	.word	0x2000056c

08001b64 <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	723b      	strb	r3, [r7, #8]
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 8001b80:	2300      	movs	r3, #0
 8001b82:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <max7219_transmit+0x6c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6858      	ldr	r0, [r3, #4]
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <max7219_transmit+0x6c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	891b      	ldrh	r3, [r3, #8]
 8001b90:	2200      	movs	r2, #0
 8001b92:	4619      	mov	r1, r3
 8001b94:	f000 fda6 	bl	80026e4 <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <max7219_transmit+0x6c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	f107 0108 	add.w	r1, r7, #8
 8001ba6:	2364      	movs	r3, #100	; 0x64
 8001ba8:	f001 fc25 	bl	80033f6 <HAL_SPI_Transmit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <max7219_transmit+0x6c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6858      	ldr	r0, [r3, #4]
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <max7219_transmit+0x6c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	891b      	ldrh	r3, [r3, #8]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f000 fd90 	bl	80026e4 <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000570 	.word	0x20000570

08001bd4 <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <max7219_init+0xb8>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <max7219_init+0xb8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d104      	bne.n	8001bf4 <max7219_init+0x20>
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <max7219_init+0xb8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e047      	b.n	8001c84 <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	200c      	movs	r0, #12
 8001bfc:	f7ff ffb2 	bl	8001b64 <max7219_transmit>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <max7219_init+0x3a>
		return max7219_status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	e03a      	b.n	8001c84 <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	200c      	movs	r0, #12
 8001c12:	f7ff ffa7 	bl	8001b64 <max7219_transmit>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <max7219_init+0x50>
		return max7219_status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	e02f      	b.n	8001c84 <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <max7219_init+0xb8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	7a9b      	ldrb	r3, [r3, #10]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	200b      	movs	r0, #11
 8001c32:	f7ff ff97 	bl	8001b64 <max7219_transmit>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <max7219_init+0x70>
		return max7219_status;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	e01f      	b.n	8001c84 <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001c44:	2100      	movs	r1, #0
 8001c46:	2009      	movs	r0, #9
 8001c48:	f7ff ff8c 	bl	8001b64 <max7219_transmit>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <max7219_init+0x86>
		return max7219_status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	e014      	b.n	8001c84 <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 8001c5a:	2108      	movs	r1, #8
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f7ff ff81 	bl	8001b64 <max7219_transmit>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <max7219_init+0x9c>
		return max7219_status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	e009      	b.n	8001c84 <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 8001c70:	f000 f84c 	bl	8001d0c <max7219_erase_no_decode>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <max7219_init+0xae>
		return max7219_status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	e000      	b.n	8001c84 <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000570 	.word	0x20000570

08001c90 <max7219_display_no_decode>:
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_no_decode(uint8_t _digit_index, uint8_t _digit_value)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	460a      	mov	r2, r1
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <max7219_display_no_decode+0x74>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d104      	bne.n	8001cb6 <max7219_display_no_decode+0x26>
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <max7219_display_no_decode+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <max7219_display_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2009      	movs	r0, #9
 8001cba:	f7ff ff53 	bl	8001b64 <max7219_transmit>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <max7219_display_no_decode+0x3c>
		return max7219_status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	e017      	b.n	8001cfc <max7219_display_no_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <max7219_display_no_decode+0x74>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	7a9b      	ldrb	r3, [r3, #10]
 8001cd2:	79fa      	ldrb	r2, [r7, #7]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d901      	bls.n	8001cdc <max7219_display_no_decode+0x4c>
		return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e00f      	b.n	8001cfc <max7219_display_no_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <max7219_display_no_decode+0x78>)
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	79ba      	ldrb	r2, [r7, #6]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff3c 	bl	8001b64 <max7219_transmit>
 8001cec:	4603      	mov	r3, r0
 8001cee:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <max7219_display_no_decode+0x6a>
		return max7219_status;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	e000      	b.n	8001cfc <max7219_display_no_decode+0x6c>

	return max7219_status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000570 	.word	0x20000570
 8001d08:	2000005c 	.word	0x2000005c

08001d0c <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <max7219_erase_no_decode+0x74>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <max7219_erase_no_decode+0x1c>
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <max7219_erase_no_decode+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	2301      	movs	r3, #1
 8001d26:	e027      	b.n	8001d78 <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2009      	movs	r0, #9
 8001d2c:	f7ff ff1a 	bl	8001b64 <max7219_transmit>
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <max7219_erase_no_decode+0x32>
		return max7219_status;
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	e01c      	b.n	8001d78 <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	e011      	b.n	8001d68 <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 8001d44:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <max7219_erase_no_decode+0x78>)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff08 	bl	8001b64 <max7219_transmit>
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <max7219_erase_no_decode+0x56>
			return max7219_status;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	e00a      	b.n	8001d78 <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <max7219_erase_no_decode+0x74>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	7a9b      	ldrb	r3, [r3, #10]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	dbe6      	blt.n	8001d44 <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 8001d76:	79fb      	ldrb	r3, [r7, #7]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000570 	.word	0x20000570
 8001d84:	2000005c 	.word	0x2000005c

08001d88 <max7219_erase_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_decode(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <max7219_erase_decode+0x74>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d104      	bne.n	8001da4 <max7219_erase_decode+0x1c>
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <max7219_erase_decode+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	2301      	movs	r3, #1
 8001da2:	e027      	b.n	8001df4 <max7219_erase_decode+0x6c>

	// Set decode mode to 'decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0xFF);
 8001da4:	21ff      	movs	r1, #255	; 0xff
 8001da6:	2009      	movs	r0, #9
 8001da8:	f7ff fedc 	bl	8001b64 <max7219_transmit>
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <max7219_erase_decode+0x32>
		return max7219_status;
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	e01c      	b.n	8001df4 <max7219_erase_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	e011      	b.n	8001de4 <max7219_erase_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF_DECODE);
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <max7219_erase_decode+0x78>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	217f      	movs	r1, #127	; 0x7f
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff feca 	bl	8001b64 <max7219_transmit>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <max7219_erase_decode+0x56>
			return max7219_status;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	e00a      	b.n	8001df4 <max7219_erase_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <max7219_erase_decode+0x74>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	7a9b      	ldrb	r3, [r3, #10]
 8001dea:	461a      	mov	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4293      	cmp	r3, r2
 8001df0:	dbe6      	blt.n	8001dc0 <max7219_erase_decode+0x38>
	}

	return max7219_status;
 8001df2:	79fb      	ldrb	r3, [r7, #7]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000570 	.word	0x20000570
 8001e00:	2000005c 	.word	0x2000005c

08001e04 <set_7segment>:

HAL_StatusTypeDef set_7segment(char * _message, uint8_t _is_blinking) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]

	if (sizeof(_message)/sizeof(char*) > 4 || _is_blinking > 2)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <set_7segment+0x16>
		return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e008      	b.n	8001e2c <set_7segment+0x28>

	max7219_handle->message = _message;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <set_7segment+0x34>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	60da      	str	r2, [r3, #12]
	max7219_handle->is_blinking = _is_blinking;
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <set_7segment+0x34>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	741a      	strb	r2, [r3, #16]

	return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000570 	.word	0x20000570

08001e3c <callback_display>:

void callback_display(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	static uint8_t display_state = 1;

	if (display_state == 1) {
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <callback_display+0x40>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10e      	bne.n	8001e66 <callback_display+0x2a>
		display_on_7segments(max7219_handle->message);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <callback_display+0x44>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f818 	bl	8001e84 <display_on_7segments>

		if (max7219_handle->is_blinking == 1)
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <callback_display+0x44>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	7c1b      	ldrb	r3, [r3, #16]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10c      	bne.n	8001e78 <callback_display+0x3c>
			display_state =0;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <callback_display+0x40>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
	}
	else if (display_state == 0) {
		max7219_erase_no_decode();
		display_state = 1;
	}
}
 8001e64:	e008      	b.n	8001e78 <callback_display+0x3c>
	else if (display_state == 0) {
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <callback_display+0x40>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <callback_display+0x3c>
		max7219_erase_no_decode();
 8001e6e:	f7ff ff4d 	bl	8001d0c <max7219_erase_no_decode>
		display_state = 1;
 8001e72:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <callback_display+0x40>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000064 	.word	0x20000064
 8001e80:	20000570 	.word	0x20000570

08001e84 <display_on_7segments>:

HAL_StatusTypeDef display_on_7segments(char * _message) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	if (sizeof(_message)/sizeof(char*) > 4)
			return HAL_ERROR;

	max7219_erase_no_decode();
 8001e8c:	f7ff ff3e 	bl	8001d0c <max7219_erase_no_decode>

	for (int i=0;i<max7219_handle->digits_count;i++) {
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e172      	b.n	800217c <display_on_7segments+0x2f8>
		switch ((int) _message[i]) {
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	3b30      	subs	r3, #48	; 0x30
 8001ea0:	2b49      	cmp	r3, #73	; 0x49
 8001ea2:	f200 8162 	bhi.w	800216a <display_on_7segments+0x2e6>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <display_on_7segments+0x28>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001fd5 	.word	0x08001fd5
 8001eb0:	08001fe3 	.word	0x08001fe3
 8001eb4:	08001ff1 	.word	0x08001ff1
 8001eb8:	08001fff 	.word	0x08001fff
 8001ebc:	0800200d 	.word	0x0800200d
 8001ec0:	0800201b 	.word	0x0800201b
 8001ec4:	08002029 	.word	0x08002029
 8001ec8:	08002037 	.word	0x08002037
 8001ecc:	08002045 	.word	0x08002045
 8001ed0:	08002053 	.word	0x08002053
 8001ed4:	0800216b 	.word	0x0800216b
 8001ed8:	0800216b 	.word	0x0800216b
 8001edc:	0800216b 	.word	0x0800216b
 8001ee0:	0800216b 	.word	0x0800216b
 8001ee4:	0800216b 	.word	0x0800216b
 8001ee8:	0800216b 	.word	0x0800216b
 8001eec:	0800216b 	.word	0x0800216b
 8001ef0:	08002061 	.word	0x08002061
 8001ef4:	0800206f 	.word	0x0800206f
 8001ef8:	0800207d 	.word	0x0800207d
 8001efc:	0800216b 	.word	0x0800216b
 8001f00:	0800208b 	.word	0x0800208b
 8001f04:	08002099 	.word	0x08002099
 8001f08:	080020a7 	.word	0x080020a7
 8001f0c:	080020b5 	.word	0x080020b5
 8001f10:	080020c3 	.word	0x080020c3
 8001f14:	080020d1 	.word	0x080020d1
 8001f18:	0800216b 	.word	0x0800216b
 8001f1c:	080020df 	.word	0x080020df
 8001f20:	0800216b 	.word	0x0800216b
 8001f24:	080020ed 	.word	0x080020ed
 8001f28:	080020fb 	.word	0x080020fb
 8001f2c:	08002109 	.word	0x08002109
 8001f30:	08002117 	.word	0x08002117
 8001f34:	08002125 	.word	0x08002125
 8001f38:	08002133 	.word	0x08002133
 8001f3c:	08002141 	.word	0x08002141
 8001f40:	0800214f 	.word	0x0800214f
 8001f44:	0800216b 	.word	0x0800216b
 8001f48:	0800216b 	.word	0x0800216b
 8001f4c:	0800216b 	.word	0x0800216b
 8001f50:	0800215d 	.word	0x0800215d
 8001f54:	0800216b 	.word	0x0800216b
 8001f58:	0800216b 	.word	0x0800216b
 8001f5c:	0800216b 	.word	0x0800216b
 8001f60:	0800216b 	.word	0x0800216b
 8001f64:	0800216b 	.word	0x0800216b
 8001f68:	0800216b 	.word	0x0800216b
 8001f6c:	0800216b 	.word	0x0800216b
 8001f70:	08002061 	.word	0x08002061
 8001f74:	0800206f 	.word	0x0800206f
 8001f78:	0800207d 	.word	0x0800207d
 8001f7c:	0800216b 	.word	0x0800216b
 8001f80:	0800208b 	.word	0x0800208b
 8001f84:	08002099 	.word	0x08002099
 8001f88:	080020a7 	.word	0x080020a7
 8001f8c:	080020b5 	.word	0x080020b5
 8001f90:	080020c3 	.word	0x080020c3
 8001f94:	080020d1 	.word	0x080020d1
 8001f98:	0800216b 	.word	0x0800216b
 8001f9c:	080020df 	.word	0x080020df
 8001fa0:	0800216b 	.word	0x0800216b
 8001fa4:	080020ed 	.word	0x080020ed
 8001fa8:	080020fb 	.word	0x080020fb
 8001fac:	08002109 	.word	0x08002109
 8001fb0:	08002117 	.word	0x08002117
 8001fb4:	08002125 	.word	0x08002125
 8001fb8:	08002133 	.word	0x08002133
 8001fbc:	08002141 	.word	0x08002141
 8001fc0:	0800214f 	.word	0x0800214f
 8001fc4:	0800216b 	.word	0x0800216b
 8001fc8:	0800216b 	.word	0x0800216b
 8001fcc:	0800216b 	.word	0x0800216b
 8001fd0:	0800215d 	.word	0x0800215d
		case 48: max7219_display_no_decode(i, 0b1111110); break; //0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	217e      	movs	r1, #126	; 0x7e
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fe58 	bl	8001c90 <max7219_display_no_decode>
 8001fe0:	e0c9      	b.n	8002176 <display_on_7segments+0x2f2>
		case 49: max7219_display_no_decode(i, 0b0110000); break; //1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2130      	movs	r1, #48	; 0x30
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe51 	bl	8001c90 <max7219_display_no_decode>
 8001fee:	e0c2      	b.n	8002176 <display_on_7segments+0x2f2>
		case 50: max7219_display_no_decode(i, 0b1101101); break; //2
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	216d      	movs	r1, #109	; 0x6d
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fe4a 	bl	8001c90 <max7219_display_no_decode>
 8001ffc:	e0bb      	b.n	8002176 <display_on_7segments+0x2f2>
		case 51: max7219_display_no_decode(i, 0b1111001); break; //3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2179      	movs	r1, #121	; 0x79
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fe43 	bl	8001c90 <max7219_display_no_decode>
 800200a:	e0b4      	b.n	8002176 <display_on_7segments+0x2f2>
		case 52: max7219_display_no_decode(i, 0b0110011); break; //4
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2133      	movs	r1, #51	; 0x33
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe3c 	bl	8001c90 <max7219_display_no_decode>
 8002018:	e0ad      	b.n	8002176 <display_on_7segments+0x2f2>
		case 53: max7219_display_no_decode(i, 0b1011011); break; //5
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	215b      	movs	r1, #91	; 0x5b
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe35 	bl	8001c90 <max7219_display_no_decode>
 8002026:	e0a6      	b.n	8002176 <display_on_7segments+0x2f2>
		case 54: max7219_display_no_decode(i, 0b1011111); break; //6
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	215f      	movs	r1, #95	; 0x5f
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fe2e 	bl	8001c90 <max7219_display_no_decode>
 8002034:	e09f      	b.n	8002176 <display_on_7segments+0x2f2>
		case 55: max7219_display_no_decode(i, 0b1110000); break; //7
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2170      	movs	r1, #112	; 0x70
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fe27 	bl	8001c90 <max7219_display_no_decode>
 8002042:	e098      	b.n	8002176 <display_on_7segments+0x2f2>
		case 56: max7219_display_no_decode(i, 0b1111111); break; //8
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	217f      	movs	r1, #127	; 0x7f
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fe20 	bl	8001c90 <max7219_display_no_decode>
 8002050:	e091      	b.n	8002176 <display_on_7segments+0x2f2>
		case 57: max7219_display_no_decode(i, 0b1111011); break; //9
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	217b      	movs	r1, #123	; 0x7b
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fe19 	bl	8001c90 <max7219_display_no_decode>
 800205e:	e08a      	b.n	8002176 <display_on_7segments+0x2f2>
		case 65: case 97: max7219_display_no_decode(i, 0b1110111); break; //a
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2177      	movs	r1, #119	; 0x77
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe12 	bl	8001c90 <max7219_display_no_decode>
 800206c:	e083      	b.n	8002176 <display_on_7segments+0x2f2>
		case 66: case 98: max7219_display_no_decode(i, 0b1111111); break; //b
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	217f      	movs	r1, #127	; 0x7f
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fe0b 	bl	8001c90 <max7219_display_no_decode>
 800207a:	e07c      	b.n	8002176 <display_on_7segments+0x2f2>
		case 67: case 99: max7219_display_no_decode(i, 0b1001110); break; //c
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	214e      	movs	r1, #78	; 0x4e
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fe04 	bl	8001c90 <max7219_display_no_decode>
 8002088:	e075      	b.n	8002176 <display_on_7segments+0x2f2>
		case 69: case 101: max7219_display_no_decode(i, 0b1001111); break; //e
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	214f      	movs	r1, #79	; 0x4f
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fdfd 	bl	8001c90 <max7219_display_no_decode>
 8002096:	e06e      	b.n	8002176 <display_on_7segments+0x2f2>
		case 70: case 102: max7219_display_no_decode(i, 0b1000111); break; //f
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2147      	movs	r1, #71	; 0x47
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fdf6 	bl	8001c90 <max7219_display_no_decode>
 80020a4:	e067      	b.n	8002176 <display_on_7segments+0x2f2>
		case 71: case 103: max7219_display_no_decode(i, 0b1011111); break; //g
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	215f      	movs	r1, #95	; 0x5f
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fdef 	bl	8001c90 <max7219_display_no_decode>
 80020b2:	e060      	b.n	8002176 <display_on_7segments+0x2f2>
		case 72: case 104: max7219_display_no_decode(i, 0b0110111); break; //h
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2137      	movs	r1, #55	; 0x37
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fde8 	bl	8001c90 <max7219_display_no_decode>
 80020c0:	e059      	b.n	8002176 <display_on_7segments+0x2f2>
		case 73: case 105: max7219_display_no_decode(i, 0b0110000); break; //i
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2130      	movs	r1, #48	; 0x30
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fde1 	bl	8001c90 <max7219_display_no_decode>
 80020ce:	e052      	b.n	8002176 <display_on_7segments+0x2f2>
		case 74: case 106: max7219_display_no_decode(i, 0b1111101); break; //j
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	217d      	movs	r1, #125	; 0x7d
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fdda 	bl	8001c90 <max7219_display_no_decode>
 80020dc:	e04b      	b.n	8002176 <display_on_7segments+0x2f2>
		case 76: case 108: max7219_display_no_decode(i, 0b0001110); break; //l
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	210e      	movs	r1, #14
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fdd3 	bl	8001c90 <max7219_display_no_decode>
 80020ea:	e044      	b.n	8002176 <display_on_7segments+0x2f2>
		case 78: case 110: max7219_display_no_decode(i, 0b0010101); break; //n
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2115      	movs	r1, #21
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fdcc 	bl	8001c90 <max7219_display_no_decode>
 80020f8:	e03d      	b.n	8002176 <display_on_7segments+0x2f2>
		case 79: case 111: max7219_display_no_decode(i, 0b1111110); break; //o
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	217e      	movs	r1, #126	; 0x7e
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fdc5 	bl	8001c90 <max7219_display_no_decode>
 8002106:	e036      	b.n	8002176 <display_on_7segments+0x2f2>
		case 80: case 112: max7219_display_no_decode(i, 0b1100111); break; //p
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2167      	movs	r1, #103	; 0x67
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fdbe 	bl	8001c90 <max7219_display_no_decode>
 8002114:	e02f      	b.n	8002176 <display_on_7segments+0x2f2>
		case 81: case 113: max7219_display_no_decode(i, 0b1110011); break; //q
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2173      	movs	r1, #115	; 0x73
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fdb7 	bl	8001c90 <max7219_display_no_decode>
 8002122:	e028      	b.n	8002176 <display_on_7segments+0x2f2>
		case 82: case 114: max7219_display_no_decode(i, 0b0000101); break; //r
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2105      	movs	r1, #5
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fdb0 	bl	8001c90 <max7219_display_no_decode>
 8002130:	e021      	b.n	8002176 <display_on_7segments+0x2f2>
		case 83: case 115: max7219_display_no_decode(i, 0b1011011); break; //s
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	215b      	movs	r1, #91	; 0x5b
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fda9 	bl	8001c90 <max7219_display_no_decode>
 800213e:	e01a      	b.n	8002176 <display_on_7segments+0x2f2>
		case 84: case 116: max7219_display_no_decode(i, 0b0001111); break; //t
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	210f      	movs	r1, #15
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fda2 	bl	8001c90 <max7219_display_no_decode>
 800214c:	e013      	b.n	8002176 <display_on_7segments+0x2f2>
		case 85: case 117: max7219_display_no_decode(i, 0b0111110); break; //u
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	213e      	movs	r1, #62	; 0x3e
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fd9b 	bl	8001c90 <max7219_display_no_decode>
 800215a:	e00c      	b.n	8002176 <display_on_7segments+0x2f2>
		case 89: case 121: max7219_display_no_decode(i, 0b0100111); break; //y
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2127      	movs	r1, #39	; 0x27
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fd94 	bl	8001c90 <max7219_display_no_decode>
 8002168:	e005      	b.n	8002176 <display_on_7segments+0x2f2>
		default : max7219_display_no_decode(i, 0b0);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fd8d 	bl	8001c90 <max7219_display_no_decode>
	for (int i=0;i<max7219_handle->digits_count;i++) {
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3301      	adds	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <display_on_7segments+0x314>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	7a9b      	ldrb	r3, [r3, #10]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4293      	cmp	r3, r2
 8002188:	f6ff ae85 	blt.w	8001e96 <display_on_7segments+0x12>
		 * D, K, M, V, W, X, Z
		 * Sorry :/
		 */
		}
	}
	return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000570 	.word	0x20000570

0800219c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a6:	2003      	movs	r0, #3
 80021a8:	f000 f8d6 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ac:	200f      	movs	r0, #15
 80021ae:	f7ff fb7f 	bl	80018b0 <HAL_InitTick>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	71fb      	strb	r3, [r7, #7]
 80021bc:	e001      	b.n	80021c2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021be:	f7ff fa89 	bl	80016d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_IncTick+0x1c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_IncTick+0x20>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_IncTick+0x1c>)
 80021dc:	6013      	str	r3, [r2, #0]
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000574 	.word	0x20000574
 80021ec:	2000006c 	.word	0x2000006c

080021f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_GetTick+0x10>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000574 	.word	0x20000574

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4906      	ldr	r1, [pc, #24]	; (800229c <__NVIC_EnableIRQ+0x34>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff4f 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff64 	bl	800224c <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ffb2 	bl	80022f4 <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff81 	bl	80022a0 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff57 	bl	8002268 <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023da:	e160      	b.n	800269e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8152 	beq.w	8002698 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d005      	beq.n	800240c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002408:	2b02      	cmp	r3, #2
 800240a:	d130      	bne.n	800246e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002442:	2201      	movs	r2, #1
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 0201 	and.w	r2, r3, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b03      	cmp	r3, #3
 8002478:	d017      	beq.n	80024aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d123      	bne.n	80024fe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	6939      	ldr	r1, [r7, #16]
 80024fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80ac 	beq.w	8002698 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_GPIO_Init+0x2f8>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a5d      	ldr	r2, [pc, #372]	; (80026bc <HAL_GPIO_Init+0x2f8>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_GPIO_Init+0x2f8>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002558:	4a59      	ldr	r2, [pc, #356]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a51      	ldr	r2, [pc, #324]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d025      	beq.n	80025d0 <HAL_GPIO_Init+0x20c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a50      	ldr	r2, [pc, #320]	; (80026c8 <HAL_GPIO_Init+0x304>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d01f      	beq.n	80025cc <HAL_GPIO_Init+0x208>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_GPIO_Init+0x308>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d019      	beq.n	80025c8 <HAL_GPIO_Init+0x204>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a4e      	ldr	r2, [pc, #312]	; (80026d0 <HAL_GPIO_Init+0x30c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <HAL_GPIO_Init+0x200>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_GPIO_Init+0x310>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00d      	beq.n	80025c0 <HAL_GPIO_Init+0x1fc>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_GPIO_Init+0x314>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <HAL_GPIO_Init+0x1f8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_GPIO_Init+0x318>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_GPIO_Init+0x1f4>
 80025b4:	2306      	movs	r3, #6
 80025b6:	e00c      	b.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025b8:	2307      	movs	r3, #7
 80025ba:	e00a      	b.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025bc:	2305      	movs	r3, #5
 80025be:	e008      	b.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e006      	b.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025c4:	2303      	movs	r3, #3
 80025c6:	e004      	b.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e002      	b.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025d0:	2300      	movs	r3, #0
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	4093      	lsls	r3, r2
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025e2:	4937      	ldr	r1, [pc, #220]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002614:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800263e:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002668:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002692:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f ae97 	bne.w	80023dc <HAL_GPIO_Init+0x18>
  }
}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40010400 	.word	0x40010400

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fd62 	bl	80011fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e31d      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b94      	ldr	r3, [pc, #592]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	4b91      	ldr	r3, [pc, #580]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002768:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d07b      	beq.n	800286e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d006      	beq.n	800278a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d10f      	bne.n	80027a2 <HAL_RCC_OscConfig+0x5e>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002788:	d10b      	bne.n	80027a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278a:	4b87      	ldr	r3, [pc, #540]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d06a      	beq.n	800286c <HAL_RCC_OscConfig+0x128>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d166      	bne.n	800286c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e2f7      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_OscConfig+0x74>
 80027aa:	4b7f      	ldr	r3, [pc, #508]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7e      	ldr	r2, [pc, #504]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e02d      	b.n	8002814 <HAL_RCC_OscConfig+0xd0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x96>
 80027c0:	4b79      	ldr	r3, [pc, #484]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a78      	ldr	r2, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b76      	ldr	r3, [pc, #472]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a75      	ldr	r2, [pc, #468]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e01c      	b.n	8002814 <HAL_RCC_OscConfig+0xd0>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0xb8>
 80027e2:	4b71      	ldr	r3, [pc, #452]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a70      	ldr	r2, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6d      	ldr	r2, [pc, #436]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xd0>
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a69      	ldr	r2, [pc, #420]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a66      	ldr	r2, [pc, #408]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fce8 	bl	80021f0 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff fce4 	bl	80021f0 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e2ad      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xe0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fcd4 	bl	80021f0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff fcd0 	bl	80021f0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e299      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800285e:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x108>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d05a      	beq.n	8002930 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d119      	bne.n	80028ba <HAL_RCC_OscConfig+0x176>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288c:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x160>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e276      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	493d      	ldr	r1, [pc, #244]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b8:	e03a      	b.n	8002930 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d020      	beq.n	8002904 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_RCC_OscConfig+0x268>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7ff fc92 	bl	80021f0 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d0:	f7ff fc8e 	bl	80021f0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e257      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	492a      	ldr	r1, [pc, #168]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
 8002902:	e015      	b.n	8002930 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_OscConfig+0x268>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff fc71 	bl	80021f0 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002912:	f7ff fc6d 	bl	80021f0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e236      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002924:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80b8 	beq.w	8002aae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d170      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x218>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e21a      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1a      	ldr	r2, [r3, #32]
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002968:	429a      	cmp	r2, r3
 800296a:	d921      	bls.n	80029b0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fc57 	bl	8003224 <RCC_SetFlashLatencyFromMSIRange>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e208      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4906      	ldr	r1, [pc, #24]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	061b      	lsls	r3, r3, #24
 80029a0:	4901      	ldr	r1, [pc, #4]	; (80029a8 <HAL_RCC_OscConfig+0x264>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
 80029a6:	e020      	b.n	80029ea <HAL_RCC_OscConfig+0x2a6>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b0:	4b99      	ldr	r3, [pc, #612]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4996      	ldr	r1, [pc, #600]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c2:	4b95      	ldr	r3, [pc, #596]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	061b      	lsls	r3, r3, #24
 80029d0:	4991      	ldr	r1, [pc, #580]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fc22 	bl	8003224 <RCC_SetFlashLatencyFromMSIRange>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1d3      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	3301      	adds	r3, #1
 80029f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029fa:	4a87      	ldr	r2, [pc, #540]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 80029fc:	6892      	ldr	r2, [r2, #8]
 80029fe:	0912      	lsrs	r2, r2, #4
 8002a00:	f002 020f 	and.w	r2, r2, #15
 8002a04:	4985      	ldr	r1, [pc, #532]	; (8002c1c <HAL_RCC_OscConfig+0x4d8>)
 8002a06:	5c8a      	ldrb	r2, [r1, r2]
 8002a08:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a0a:	4a85      	ldr	r2, [pc, #532]	; (8002c20 <HAL_RCC_OscConfig+0x4dc>)
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a0e:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <HAL_RCC_OscConfig+0x4e0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe ff4c 	bl	80018b0 <HAL_InitTick>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d045      	beq.n	8002aae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	e1b5      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d029      	beq.n	8002a82 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a2e:	4b7e      	ldr	r3, [pc, #504]	; (8002c28 <HAL_RCC_OscConfig+0x4e4>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fbdc 	bl	80021f0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fbd8 	bl	80021f0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1a1      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a4e:	4b72      	ldr	r3, [pc, #456]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5a:	4b6f      	ldr	r3, [pc, #444]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	496c      	ldr	r1, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4967      	ldr	r1, [pc, #412]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e015      	b.n	8002aae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a82:	4b69      	ldr	r3, [pc, #420]	; (8002c28 <HAL_RCC_OscConfig+0x4e4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff fbb2 	bl	80021f0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a90:	f7ff fbae 	bl	80021f0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e177      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d030      	beq.n	8002b1c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac2:	4b5a      	ldr	r3, [pc, #360]	; (8002c2c <HAL_RCC_OscConfig+0x4e8>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7ff fb92 	bl	80021f0 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fb8e 	bl	80021f0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e157      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ae2:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x38c>
 8002aee:	e015      	b.n	8002b1c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af0:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fb7b 	bl	80021f0 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afe:	f7ff fb77 	bl	80021f0 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e140      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80b5 	beq.w	8002c94 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	4a36      	ldr	r2, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6253      	str	r3, [r2, #36]	; 0x24
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_RCC_OscConfig+0x4ec>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b33      	ldr	r3, [pc, #204]	; (8002c30 <HAL_RCC_OscConfig+0x4ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a32      	ldr	r2, [pc, #200]	; (8002c30 <HAL_RCC_OscConfig+0x4ec>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff fb3f 	bl	80021f0 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7ff fb3b 	bl	80021f0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e104      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <HAL_RCC_OscConfig+0x4ec>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x466>
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ba8:	e02d      	b.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x488>
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbc:	6353      	str	r3, [r2, #52]	; 0x34
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc8:	6353      	str	r3, [r2, #52]	; 0x34
 8002bca:	e01c      	b.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x4aa>
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd8:	4a0f      	ldr	r2, [pc, #60]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6353      	str	r3, [r2, #52]	; 0x34
 8002be0:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bea:	6353      	str	r3, [r2, #52]	; 0x34
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bf8:	6353      	str	r3, [r2, #52]	; 0x34
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	4a06      	ldr	r2, [pc, #24]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c04:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d024      	beq.n	8002c58 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff faef 	bl	80021f0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c14:	e019      	b.n	8002c4a <HAL_RCC_OscConfig+0x506>
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	08004a78 	.word	0x08004a78
 8002c20:	20000058 	.word	0x20000058
 8002c24:	20000068 	.word	0x20000068
 8002c28:	42470020 	.word	0x42470020
 8002c2c:	42470680 	.word	0x42470680
 8002c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7ff fadc 	bl	80021f0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0a3      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c4a:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ee      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4f0>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7ff faca 	bl	80021f0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7ff fac6 	bl	80021f0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e08d      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c76:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ee      	bne.n	8002c60 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c82:	7ffb      	ldrb	r3, [r7, #31]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d079      	beq.n	8002d90 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d056      	beq.n	8002d50 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d13b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_OscConfig+0x65c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fa9e 	bl	80021f0 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff fa9a 	bl	80021f0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e063      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cca:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	4319      	orrs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	430b      	orrs	r3, r1
 8002cee:	492b      	ldr	r1, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x65c>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7ff fa79 	bl	80021f0 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d02:	f7ff fa75 	bl	80021f0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e03e      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x5be>
 8002d20:	e036      	b.n	8002d90 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_RCC_OscConfig+0x65c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff fa62 	bl	80021f0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d30:	f7ff fa5e 	bl	80021f0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e027      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d42:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5ec>
 8002d4e:	e01f      	b.n	8002d90 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01a      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_RCC_OscConfig+0x658>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d10d      	bne.n	8002d8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470060 	.word	0x42470060

08002da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e11a      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b8f      	ldr	r3, [pc, #572]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d919      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x34>
 8002dcc:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a89      	ldr	r2, [pc, #548]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b87      	ldr	r3, [pc, #540]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 0201 	bic.w	r2, r3, #1
 8002de0:	4985      	ldr	r1, [pc, #532]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de8:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0f9      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e06:	4b7d      	ldr	r3, [pc, #500]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	497a      	ldr	r1, [pc, #488]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 808e 	beq.w	8002f42 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e2e:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0d7      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0cb      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0bf      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e6e:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0b7      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	495c      	ldr	r1, [pc, #368]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7ff f9ae 	bl	80021f0 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d112      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7ff f9a6 	bl	80021f0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e09b      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb6:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xfc>
 8002ec2:	e03e      	b.n	8002f42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d112      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ece:	f7ff f98f 	bl	80021f0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e084      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee4:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d1ee      	bne.n	8002ece <HAL_RCC_ClockConfig+0x12a>
 8002ef0:	e027      	b.n	8002f42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d11d      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7ff f978 	bl	80021f0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e06d      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f12:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d1ee      	bne.n	8002efc <HAL_RCC_ClockConfig+0x158>
 8002f1e:	e010      	b.n	8002f42 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7ff f966 	bl	80021f0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e05b      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ee      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d219      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x1be>
 8002f56:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0201 	bic.w	r2, r3, #1
 8002f6a:	4923      	ldr	r1, [pc, #140]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_ClockConfig+0x254>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e034      	b.n	8002fee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4917      	ldr	r1, [pc, #92]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490f      	ldr	r1, [pc, #60]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f823 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_RCC_ClockConfig+0x258>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490b      	ldr	r1, [pc, #44]	; (8003000 <HAL_RCC_ClockConfig+0x25c>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_RCC_ClockConfig+0x264>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fc64 	bl	80018b0 <HAL_InitTick>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fec:	7afb      	ldrb	r3, [r7, #11]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023c00 	.word	0x40023c00
 8002ffc:	40023800 	.word	0x40023800
 8003000:	08004a78 	.word	0x08004a78
 8003004:	20000058 	.word	0x20000058
 8003008:	20000068 	.word	0x20000068

0800300c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003010:	b08e      	sub	sp, #56	; 0x38
 8003012:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d00d      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x34>
 8003024:	2b0c      	cmp	r3, #12
 8003026:	f200 8092 	bhi.w	800314e <HAL_RCC_GetSysClockFreq+0x142>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x28>
 800302e:	2b08      	cmp	r3, #8
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x2e>
 8003032:	e08c      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b51      	ldr	r3, [pc, #324]	; (800317c <HAL_RCC_GetSysClockFreq+0x170>)
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003038:	e097      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800303a:	4b51      	ldr	r3, [pc, #324]	; (8003180 <HAL_RCC_GetSysClockFreq+0x174>)
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800303e:	e094      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	0c9b      	lsrs	r3, r3, #18
 8003044:	f003 020f 	and.w	r2, r3, #15
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <HAL_RCC_GetSysClockFreq+0x178>)
 800304a:	5c9b      	ldrb	r3, [r3, r2]
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	0d9b      	lsrs	r3, r3, #22
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_GetSysClockFreq+0x16c>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d021      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	2200      	movs	r2, #0
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	61fa      	str	r2, [r7, #28]
 800306e:	4b44      	ldr	r3, [pc, #272]	; (8003180 <HAL_RCC_GetSysClockFreq+0x174>)
 8003070:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003074:	464a      	mov	r2, r9
 8003076:	fb03 f202 	mul.w	r2, r3, r2
 800307a:	2300      	movs	r3, #0
 800307c:	4644      	mov	r4, r8
 800307e:	fb04 f303 	mul.w	r3, r4, r3
 8003082:	4413      	add	r3, r2
 8003084:	4a3e      	ldr	r2, [pc, #248]	; (8003180 <HAL_RCC_GetSysClockFreq+0x174>)
 8003086:	4644      	mov	r4, r8
 8003088:	fba4 0102 	umull	r0, r1, r4, r2
 800308c:	440b      	add	r3, r1
 800308e:	4619      	mov	r1, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	2200      	movs	r2, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	617a      	str	r2, [r7, #20]
 8003098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800309c:	f7fd f878 	bl	8000190 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4613      	mov	r3, r2
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
 80030a8:	e04e      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	2200      	movs	r2, #0
 80030ae:	469a      	mov	sl, r3
 80030b0:	4693      	mov	fp, r2
 80030b2:	4652      	mov	r2, sl
 80030b4:	465b      	mov	r3, fp
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	0159      	lsls	r1, r3, #5
 80030c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c4:	0150      	lsls	r0, r2, #5
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	ebb2 080a 	subs.w	r8, r2, sl
 80030ce:	eb63 090b 	sbc.w	r9, r3, fp
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030e6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ea:	eb63 0509 	sbc.w	r5, r3, r9
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	00eb      	lsls	r3, r5, #3
 80030f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fc:	00e2      	lsls	r2, r4, #3
 80030fe:	4614      	mov	r4, r2
 8003100:	461d      	mov	r5, r3
 8003102:	eb14 030a 	adds.w	r3, r4, sl
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	eb45 030b 	adc.w	r3, r5, fp
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311a:	4629      	mov	r1, r5
 800311c:	028b      	lsls	r3, r1, #10
 800311e:	4620      	mov	r0, r4
 8003120:	4629      	mov	r1, r5
 8003122:	4604      	mov	r4, r0
 8003124:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003128:	4601      	mov	r1, r0
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	2200      	movs	r2, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	60fa      	str	r2, [r7, #12]
 8003138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800313c:	f7fd f828 	bl	8000190 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800314c:	e00d      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	0b5b      	lsrs	r3, r3, #13
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	3301      	adds	r3, #1
 800315e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800316c:	4618      	mov	r0, r3
 800316e:	3738      	adds	r7, #56	; 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	00f42400 	.word	0x00f42400
 8003180:	016e3600 	.word	0x016e3600
 8003184:	08004a6c 	.word	0x08004a6c

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b02      	ldr	r3, [pc, #8]	; (8003198 <HAL_RCC_GetHCLKFreq+0x10>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000058 	.word	0x20000058

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a0:	f7ff fff2 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08004a88 	.word	0x08004a88

080031c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	220f      	movs	r2, #15
 80031d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_GetClockConfig+0x58>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0203 	and.w	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_RCC_GetClockConfig+0x58>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_GetClockConfig+0x58>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_RCC_GetClockConfig+0x58>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	08db      	lsrs	r3, r3, #3
 80031fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_GetClockConfig+0x5c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0201 	and.w	r2, r3, #1
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	601a      	str	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	40023800 	.word	0x40023800
 8003220:	40023c00 	.word	0x40023c00

08003224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d12c      	bne.n	8003296 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800323c:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e016      	b.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325e:	6253      	str	r3, [r2, #36]	; 0x24
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800326c:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003274:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003280:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003288:	d105      	bne.n	8003296 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003290:	d101      	bne.n	8003296 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003292:	2301      	movs	r3, #1
 8003294:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 0201 	bic.w	r2, r3, #1
 80032b0:	490b      	ldr	r1, [pc, #44]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40007000 	.word	0x40007000
 80032e0:	40023c00 	.word	0x40023c00

080032e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07b      	b.n	80033ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003306:	d009      	beq.n	800331c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
 800330e:	e005      	b.n	800331c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe f9fa 	bl	8001730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003352:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	ea42 0103 	orr.w	r1, r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0104 	and.w	r1, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0210 	and.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b088      	sub	sp, #32
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_SPI_Transmit+0x22>
 8003414:	2302      	movs	r3, #2
 8003416:	e126      	b.n	8003666 <HAL_SPI_Transmit+0x270>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003420:	f7fe fee6 	bl	80021f0 <HAL_GetTick>
 8003424:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d002      	beq.n	800343c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003436:	2302      	movs	r3, #2
 8003438:	77fb      	strb	r3, [r7, #31]
    goto error;
 800343a:	e10b      	b.n	8003654 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_SPI_Transmit+0x52>
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800344c:	e102      	b.n	8003654 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2203      	movs	r2, #3
 8003452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003494:	d10f      	bne.n	80034b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d007      	beq.n	80034d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034dc:	d14b      	bne.n	8003576 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_SPI_Transmit+0xf6>
 80034e6:	8afb      	ldrh	r3, [r7, #22]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d13e      	bne.n	800356a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	1c9a      	adds	r2, r3, #2
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003510:	e02b      	b.n	800356a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d112      	bne.n	8003546 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	881a      	ldrh	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	86da      	strh	r2, [r3, #54]	; 0x36
 8003544:	e011      	b.n	800356a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003546:	f7fe fe53 	bl	80021f0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d803      	bhi.n	800355e <HAL_SPI_Transmit+0x168>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d102      	bne.n	8003564 <HAL_SPI_Transmit+0x16e>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003568:	e074      	b.n	8003654 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ce      	bne.n	8003512 <HAL_SPI_Transmit+0x11c>
 8003574:	e04c      	b.n	8003610 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_SPI_Transmit+0x18e>
 800357e:	8afb      	ldrh	r3, [r7, #22]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d140      	bne.n	8003606 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035aa:	e02c      	b.n	8003606 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d113      	bne.n	80035e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
 80035e0:	e011      	b.n	8003606 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e2:	f7fe fe05 	bl	80021f0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d803      	bhi.n	80035fa <HAL_SPI_Transmit+0x204>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_Transmit+0x20a>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003604:	e026      	b.n	8003654 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1cd      	bne.n	80035ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f8b3 	bl	8003780 <SPI_EndRxTxTransaction>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e000      	b.n	8003654 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003652:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003664:	7ffb      	ldrb	r3, [r7, #31]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003680:	f7fe fdb6 	bl	80021f0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	4413      	add	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003690:	f7fe fdae 	bl	80021f0 <HAL_GetTick>
 8003694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	015b      	lsls	r3, r3, #5
 800369c:	0d1b      	lsrs	r3, r3, #20
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036a6:	e054      	b.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d050      	beq.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036b0:	f7fe fd9e 	bl	80021f0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d902      	bls.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d13d      	bne.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036de:	d111      	bne.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e8:	d004      	beq.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	d107      	bne.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d10f      	bne.n	800372e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800372c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e017      	b.n	8003772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3b01      	subs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	bf0c      	ite	eq
 8003762:	2301      	moveq	r3, #1
 8003764:	2300      	movne	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	429a      	cmp	r2, r3
 800376e:	d19b      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000058 	.word	0x20000058

08003780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <SPI_EndRxTxTransaction+0x7c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <SPI_EndRxTxTransaction+0x80>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0d5b      	lsrs	r3, r3, #21
 8003798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037aa:	d112      	bne.n	80037d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2200      	movs	r2, #0
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff ff5a 	bl	8003670 <SPI_WaitFlagStateUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e00f      	b.n	80037f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3b01      	subs	r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b80      	cmp	r3, #128	; 0x80
 80037ea:	d0f2      	beq.n	80037d2 <SPI_EndRxTxTransaction+0x52>
 80037ec:	e000      	b.n	80037f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80037ee:	bf00      	nop
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000058 	.word	0x20000058
 8003800:	165e9f81 	.word	0x165e9f81

08003804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e031      	b.n	800387a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd ffe2 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 fc0a 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e03a      	b.n	8003912 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d00e      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x58>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a16      	ldr	r2, [pc, #88]	; (800391c <HAL_TIM_Base_Start_IT+0x98>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x58>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <HAL_TIM_Base_Start_IT+0x9c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x58>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a13      	ldr	r2, [pc, #76]	; (8003924 <HAL_TIM_Base_Start_IT+0xa0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d111      	bne.n	8003900 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d010      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fe:	e007      	b.n	8003910 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40010800 	.word	0x40010800

08003928 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e031      	b.n	800399e <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd ff32 	bl	80017b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f000 fb78 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <HAL_TIM_PWM_Start+0x24>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e022      	b.n	8003a12 <HAL_TIM_PWM_Start+0x6a>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d109      	bne.n	80039e6 <HAL_TIM_PWM_Start+0x3e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	e015      	b.n	8003a12 <HAL_TIM_PWM_Start+0x6a>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d109      	bne.n	8003a00 <HAL_TIM_PWM_Start+0x58>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e008      	b.n	8003a12 <HAL_TIM_PWM_Start+0x6a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e051      	b.n	8003abe <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x82>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003a28:	e013      	b.n	8003a52 <HAL_TIM_PWM_Start+0xaa>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIM_PWM_Start+0x92>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003a38:	e00b      	b.n	8003a52 <HAL_TIM_PWM_Start+0xaa>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d104      	bne.n	8003a4a <HAL_TIM_PWM_Start+0xa2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a48:	e003      	b.n	8003a52 <HAL_TIM_PWM_Start+0xaa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2201      	movs	r2, #1
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fd87 	bl	800456e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d00e      	beq.n	8003a88 <HAL_TIM_PWM_Start+0xe0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <HAL_TIM_PWM_Start+0x120>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_TIM_PWM_Start+0xe0>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <HAL_TIM_PWM_Start+0x124>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_TIM_PWM_Start+0xe0>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <HAL_TIM_PWM_Start+0x128>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d010      	beq.n	8003abc <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	e007      	b.n	8003abc <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40010800 	.word	0x40010800

08003ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0202 	mvn.w	r2, #2
 8003b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa85 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa78 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fa87 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0204 	mvn.w	r2, #4
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa5b 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa4e 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fa5d 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0208 	mvn.w	r2, #8
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2204      	movs	r2, #4
 8003bae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa31 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa24 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fa33 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2208      	movs	r2, #8
 8003c02:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa07 	bl	8004026 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9fa 	bl	8004014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa09 	bl	8004038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0201 	mvn.w	r2, #1
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fd2a 	bl	80016ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9e3 	bl	800404a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ac      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	f200 809f 	bhi.w	8003df4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003df5 	.word	0x08003df5
 8003cc4:	08003df5 	.word	0x08003df5
 8003cc8:	08003df5 	.word	0x08003df5
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003df5 	.word	0x08003df5
 8003cd4:	08003df5 	.word	0x08003df5
 8003cd8:	08003df5 	.word	0x08003df5
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003df5 	.word	0x08003df5
 8003ce4:	08003df5 	.word	0x08003df5
 8003ce8:	08003df5 	.word	0x08003df5
 8003cec:	08003db3 	.word	0x08003db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa20 	bl	800413c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
      break;
 8003d2e:	e062      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa3c 	bl	80041b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
      break;
 8003d70:	e041      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fa59 	bl	8004230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
      break;
 8003db0:	e021      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fa76 	bl	80042aa <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
      break;
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003df4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_ConfigClockSource+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0b3      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x180>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d03e      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0xd0>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	f200 8087 	bhi.w	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	f000 8085 	beq.w	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d87f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d01a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xa2>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d87b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d050      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x116>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d877      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d03c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xf6>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d873      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d058      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x136>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d86f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d064      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d86b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d060      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d867      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d05a      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ea8:	e062      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f000 fb39 	bl	8004530 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ecc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	609a      	str	r2, [r3, #8]
      break;
 8003ed6:	e04e      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f000 fb22 	bl	8004530 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efa:	609a      	str	r2, [r3, #8]
      break;
 8003efc:	e03b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fa99 	bl	8004442 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2150      	movs	r1, #80	; 0x50
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 faf0 	bl	80044fc <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e02b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fab7 	bl	800449e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2160      	movs	r1, #96	; 0x60
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fae0 	bl	80044fc <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e01b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fa79 	bl	8004442 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fad0 	bl	80044fc <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 fac7 	bl	80044fc <TIM_ITRx_SetConfig>
        break;
 8003f6e:	e002      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e031      	b.n	800400c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9b3 	bl	8004326 <TIM_SlaveTimer_SetConfig>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    __HAL_UNLOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e018      	b.n	800400c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ff8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a2b      	ldr	r2, [pc, #172]	; (8004124 <TIM_Base_SetConfig+0xc8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <TIM_Base_SetConfig+0xcc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a29      	ldr	r2, [pc, #164]	; (800412c <TIM_Base_SetConfig+0xd0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a28      	ldr	r2, [pc, #160]	; (8004130 <TIM_Base_SetConfig+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d017      	beq.n	80040de <TIM_Base_SetConfig+0x82>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <TIM_Base_SetConfig+0xc8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <TIM_Base_SetConfig+0x82>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <TIM_Base_SetConfig+0xcc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00f      	beq.n	80040de <TIM_Base_SetConfig+0x82>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1a      	ldr	r2, [pc, #104]	; (800412c <TIM_Base_SetConfig+0xd0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00b      	beq.n	80040de <TIM_Base_SetConfig+0x82>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a19      	ldr	r2, [pc, #100]	; (8004130 <TIM_Base_SetConfig+0xd4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d007      	beq.n	80040de <TIM_Base_SetConfig+0x82>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <TIM_Base_SetConfig+0xd8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_Base_SetConfig+0x82>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a17      	ldr	r2, [pc, #92]	; (8004138 <TIM_Base_SetConfig+0xdc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d108      	bne.n	80040f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	615a      	str	r2, [r3, #20]
}
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010800 	.word	0x40010800
 8004134:	40010c00 	.word	0x40010c00
 8004138:	40011000 	.word	0x40011000

0800413c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 0302 	bic.w	r3, r3, #2
 8004184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0210 	bic.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	621a      	str	r2, [r3, #32]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b087      	sub	sp, #28
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	031b      	lsls	r3, r3, #12
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 0307 	bic.w	r3, r3, #7
 8004350:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b70      	cmp	r3, #112	; 0x70
 800436a:	d01a      	beq.n	80043a2 <TIM_SlaveTimer_SetConfig+0x7c>
 800436c:	2b70      	cmp	r3, #112	; 0x70
 800436e:	d860      	bhi.n	8004432 <TIM_SlaveTimer_SetConfig+0x10c>
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d054      	beq.n	800441e <TIM_SlaveTimer_SetConfig+0xf8>
 8004374:	2b60      	cmp	r3, #96	; 0x60
 8004376:	d85c      	bhi.n	8004432 <TIM_SlaveTimer_SetConfig+0x10c>
 8004378:	2b50      	cmp	r3, #80	; 0x50
 800437a:	d046      	beq.n	800440a <TIM_SlaveTimer_SetConfig+0xe4>
 800437c:	2b50      	cmp	r3, #80	; 0x50
 800437e:	d858      	bhi.n	8004432 <TIM_SlaveTimer_SetConfig+0x10c>
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d019      	beq.n	80043b8 <TIM_SlaveTimer_SetConfig+0x92>
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d854      	bhi.n	8004432 <TIM_SlaveTimer_SetConfig+0x10c>
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	d054      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x110>
 800438c:	2b30      	cmp	r3, #48	; 0x30
 800438e:	d850      	bhi.n	8004432 <TIM_SlaveTimer_SetConfig+0x10c>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d050      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x110>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d84c      	bhi.n	8004432 <TIM_SlaveTimer_SetConfig+0x10c>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04c      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x110>
 800439c:	2b10      	cmp	r3, #16
 800439e:	d04a      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80043a0:	e047      	b.n	8004432 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68d9      	ldr	r1, [r3, #12]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f000 f8bd 	bl	8004530 <TIM_ETR_SetConfig>
      break;
 80043b6:	e03f      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b05      	cmp	r3, #5
 80043be:	d101      	bne.n	80043c4 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e03a      	b.n	800443a <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a1a      	ldr	r2, [r3, #32]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ea:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	621a      	str	r2, [r3, #32]
      break;
 8004408:	e016      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f813 	bl	8004442 <TIM_TI1_ConfigInputStage>
      break;
 800441c:	e00c      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6899      	ldr	r1, [r3, #8]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 f837 	bl	800449e <TIM_TI2_ConfigInputStage>
      break;
 8004430:	e002      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004432:	bf00      	nop
 8004434:	e000      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004436:	bf00      	nop
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f023 0201 	bic.w	r2, r3, #1
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800446c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 030a 	bic.w	r3, r3, #10
 800447e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	621a      	str	r2, [r3, #32]
}
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f023 0210 	bic.w	r2, r3, #16
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	f043 0307 	orr.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	609a      	str	r2, [r3, #8]
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	431a      	orrs	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	609a      	str	r2, [r3, #8]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2201      	movs	r2, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	43db      	mvns	r3, r3
 8004590:	401a      	ands	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1a      	ldr	r2, [r3, #32]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]
}
 80045ac:	bf00      	nop
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e046      	b.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d00e      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a13      	ldr	r2, [pc, #76]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a10      	ldr	r2, [pc, #64]	; (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10c      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40010800 	.word	0x40010800

08004674 <timer_interrupt>:
		{SEGMENT, &callback_display, 499},
		//TODO
};

//called when the an interrupt happen
void timer_interrupt(void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0

	if (timer_handler->timer_is_running == 1) {
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <timer_interrupt+0x1c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	7c1b      	ldrb	r3, [r3, #16]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d103      	bne.n	800468a <timer_interrupt+0x16>
		timer_handler->chosen_function.interrupt_function();
 8004682:	4b03      	ldr	r3, [pc, #12]	; (8004690 <timer_interrupt+0x1c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4798      	blx	r3
	}
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000578 	.word	0x20000578

08004694 <timer_init>:

//init the timer
HAL_StatusTypeDef timer_init(TypeDef_Timer_Handler * _timer_handler) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

	timer_handler = _timer_handler;
 800469c:	4a0f      	ldr	r2, [pc, #60]	; (80046dc <timer_init+0x48>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]

	//start timer
	HAL_TIM_Base_Start_IT(timer_handler->htim);
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <timer_init+0x48>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff f8eb 	bl	8003884 <HAL_TIM_Base_Start_IT>

	//init interrupt frequence
	timer_handler->htim->Instance->ARR = 100;
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <timer_init+0x48>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2264      	movs	r2, #100	; 0x64
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c

	timer_handler->callback_function = function_list;
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <timer_init+0x48>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <timer_init+0x4c>)
 80046c0:	615a      	str	r2, [r3, #20]
	timer_handler->timer_frequence = 0;
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <timer_init+0x48>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2200      	movs	r2, #0
 80046c8:	60da      	str	r2, [r3, #12]
	timer_handler->timer_is_running = 0;
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <timer_init+0x48>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	741a      	strb	r2, [r3, #16]

	return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000578 	.word	0x20000578
 80046e0:	08004a90 	.word	0x08004a90

080046e4 <set_interrupt_launcher>:


void set_interrupt_launcher(TIMER_Enum _chosen_function) {
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
	timer_handler->chosen_function = timer_handler->callback_function[_chosen_function];
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <set_interrupt_launcher+0x50>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6959      	ldr	r1, [r3, #20]
 80046f4:	79fa      	ldrb	r2, [r7, #7]
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	18ca      	adds	r2, r1, r3
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <set_interrupt_launcher+0x50>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	ca07      	ldmia	r2, {r0, r1, r2}
 8004706:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	timer_handler->htim->Instance->ARR = timer_handler->callback_function[_chosen_function].frequence;
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <set_interrupt_launcher+0x50>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6959      	ldr	r1, [r3, #20]
 8004710:	79fa      	ldrb	r2, [r7, #7]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	18ca      	adds	r2, r1, r3
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <set_interrupt_launcher+0x50>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6892      	ldr	r2, [r2, #8]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000578 	.word	0x20000578

08004738 <start_timer>:

void start_timer(void) { timer_handler->timer_is_running = 1; }
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <start_timer+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	741a      	strb	r2, [r3, #16]
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	20000578 	.word	0x20000578

08004750 <stop_timer>:

void stop_timer(void) { timer_handler->timer_is_running = 0; }
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <stop_timer+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2200      	movs	r2, #0
 800475a:	741a      	strb	r2, [r3, #16]
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	20000578 	.word	0x20000578

08004768 <buzzer_play_note>:
#include "music.h"

static TypeDef_Music_Handler * music_handler;

void buzzer_play_note(TypeDef_Note * _note)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	music_handler->htim->Instance->ARR = _note->arr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8a1a      	ldrh	r2, [r3, #16]
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <buzzer_play_note+0x30>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
	music_handler->htim->Instance->CCR2 = CRR;
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <buzzer_play_note+0x30>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000057c 	.word	0x2000057c

0800479c <buzzer_mute>:

void buzzer_mute()
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
	music_handler->htim->Instance->CCR2 = 0;
 80047a0:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <buzzer_mute+0x18>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	2000057c 	.word	0x2000057c

080047b8 <buzzer_play_note_by_name>:

void buzzer_play_note_by_name(uint16_t _index, MUSIC_Enum _choice)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	460a      	mov	r2, r1
 80047c2:	80fb      	strh	r3, [r7, #6]
 80047c4:	4613      	mov	r3, r2
 80047c6:	717b      	strb	r3, [r7, #5]
	if(!strcmp(MUTE, music_handler->partitions[_choice].partition[_index]))
 80047c8:	4b26      	ldr	r3, [pc, #152]	; (8004864 <buzzer_play_note_by_name+0xac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	797b      	ldrb	r3, [r7, #5]
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4619      	mov	r1, r3
 80047e0:	4821      	ldr	r0, [pc, #132]	; (8004868 <buzzer_play_note_by_name+0xb0>)
 80047e2:	f7fb fccb 	bl	800017c <strcmp>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <buzzer_play_note_by_name+0x3a>
	{
		buzzer_mute();
 80047ec:	f7ff ffd6 	bl	800479c <buzzer_mute>
				buzzer_play_note(&music_handler->notes[i]);
				break;
			}
		}
	}
}
 80047f0:	e034      	b.n	800485c <buzzer_play_note_by_name+0xa4>
		for(uint8_t i=0;i<music_handler->notes_sz;i++){
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	e02b      	b.n	8004850 <buzzer_play_note_by_name+0x98>
			if (!strcmp(music_handler->notes[i].name, music_handler->partitions[_choice].partition[_index])){
 80047f8:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <buzzer_play_note_by_name+0xac>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	7bfa      	ldrb	r2, [r7, #15]
 8004800:	4613      	mov	r3, r2
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	440b      	add	r3, r1
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	4b15      	ldr	r3, [pc, #84]	; (8004864 <buzzer_play_note_by_name+0xac>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	797b      	ldrb	r3, [r7, #5]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	f7fb fcaa 	bl	800017c <strcmp>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10d      	bne.n	800484a <buzzer_play_note_by_name+0x92>
				buzzer_play_note(&music_handler->notes[i]);
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <buzzer_play_note_by_name+0xac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	440b      	add	r3, r1
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff91 	bl	8004768 <buzzer_play_note>
				break;
 8004846:	bf00      	nop
}
 8004848:	e008      	b.n	800485c <buzzer_play_note_by_name+0xa4>
		for(uint8_t i=0;i<music_handler->notes_sz;i++){
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	3301      	adds	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <buzzer_play_note_by_name+0xac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	d3cd      	bcc.n	80047f8 <buzzer_play_note_by_name+0x40>
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	2000057c 	.word	0x2000057c
 8004868:	08004a38 	.word	0x08004a38

0800486c <init_music>:
		partition_win,
		57,
	}
};

HAL_StatusTypeDef init_music(TypeDef_Music_Handler * _music_handler) {
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

	music_handler = _music_handler;
 8004874:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <init_music+0x44>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6013      	str	r3, [r2, #0]

	music_handler->notes = notes_array;
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <init_music+0x44>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <init_music+0x48>)
 8004880:	605a      	str	r2, [r3, #4]

	music_handler->notes_sz = 12;
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <init_music+0x44>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	220c      	movs	r2, #12
 8004888:	609a      	str	r2, [r3, #8]

	music_handler->chosen_music = 0;
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <init_music+0x44>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	741a      	strb	r2, [r3, #16]

	music_handler->partitions = partition_array;
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <init_music+0x44>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <init_music+0x4c>)
 8004898:	60da      	str	r2, [r3, #12]

	music_handler->music_running = 0;
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <init_music+0x44>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	745a      	strb	r2, [r3, #17]
			_music_handler.notes[i].arr = ((TIMER_FREQ/_music_handler.notes[i].frequency) - 1);

		}
		*/

	return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	2000057c 	.word	0x2000057c
 80048b4:	20000070 	.word	0x20000070
 80048b8:	200003e4 	.word	0x200003e4

080048bc <play_music>:

void play_music(void) {
 80048bc:	b598      	push	{r3, r4, r7, lr}
 80048be:	af00      	add	r7, sp, #0
	if (music_handler->music_running == 1) {
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <play_music+0x5c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	7c5b      	ldrb	r3, [r3, #17]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d123      	bne.n	8004912 <play_music+0x56>
		static uint8_t music_index = 0;
		if (music_index >= get_partition_sz(music_handler->chosen_music)) {
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <play_music+0x60>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b29c      	uxth	r4, r3
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <play_music+0x5c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	7c1b      	ldrb	r3, [r3, #16]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f836 	bl	8004948 <get_partition_sz>
 80048dc:	4603      	mov	r3, r0
 80048de:	429c      	cmp	r4, r3
 80048e0:	d307      	bcc.n	80048f2 <play_music+0x36>
			music_index = 0;
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <play_music+0x60>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
			music_handler->music_running = 0;
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <play_music+0x5c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2200      	movs	r2, #0
 80048ee:	745a      	strb	r2, [r3, #17]
		else {
			buzzer_play_note_by_name(music_index, music_handler->chosen_music);
			music_index++;
		}
	}
}
 80048f0:	e00f      	b.n	8004912 <play_music+0x56>
			buzzer_play_note_by_name(music_index, music_handler->chosen_music);
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <play_music+0x60>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <play_music+0x5c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	7c1b      	ldrb	r3, [r3, #16]
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7ff ff59 	bl	80047b8 <buzzer_play_note_by_name>
			music_index++;
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <play_music+0x60>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b03      	ldr	r3, [pc, #12]	; (800491c <play_music+0x60>)
 8004910:	701a      	strb	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	bd98      	pop	{r3, r4, r7, pc}
 8004916:	bf00      	nop
 8004918:	2000057c 	.word	0x2000057c
 800491c:	20000580 	.word	0x20000580

08004920 <set_music>:

void set_music(MUSIC_Enum _music_name) {
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
	music_handler->chosen_music = _music_name;
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <set_music+0x24>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	79fa      	ldrb	r2, [r7, #7]
 8004930:	741a      	strb	r2, [r3, #16]
	music_handler->music_running = 1;
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <set_music+0x24>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	745a      	strb	r2, [r3, #17]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	2000057c 	.word	0x2000057c

08004948 <get_partition_sz>:

uint16_t get_partition_sz(MUSIC_Enum _name) { return music_handler->partitions[_name].array_sz; }
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <get_partition_sz+0x24>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	b29b      	uxth	r3, r3
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	2000057c 	.word	0x2000057c

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	2600      	movs	r6, #0
 8004974:	4d0c      	ldr	r5, [pc, #48]	; (80049a8 <__libc_init_array+0x38>)
 8004976:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <__libc_init_array+0x3c>)
 8004978:	1b64      	subs	r4, r4, r5
 800497a:	10a4      	asrs	r4, r4, #2
 800497c:	42a6      	cmp	r6, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	f000 f822 	bl	80049c8 <_init>
 8004984:	2600      	movs	r6, #0
 8004986:	4d0a      	ldr	r5, [pc, #40]	; (80049b0 <__libc_init_array+0x40>)
 8004988:	4c0a      	ldr	r4, [pc, #40]	; (80049b4 <__libc_init_array+0x44>)
 800498a:	1b64      	subs	r4, r4, r5
 800498c:	10a4      	asrs	r4, r4, #2
 800498e:	42a6      	cmp	r6, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f855 3b04 	ldr.w	r3, [r5], #4
 8004998:	4798      	blx	r3
 800499a:	3601      	adds	r6, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a2:	4798      	blx	r3
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08004ab0 	.word	0x08004ab0
 80049ac:	08004ab0 	.word	0x08004ab0
 80049b0:	08004ab0 	.word	0x08004ab0
 80049b4:	08004ab4 	.word	0x08004ab4

080049b8 <memset>:
 80049b8:	4603      	mov	r3, r0
 80049ba:	4402      	add	r2, r0
 80049bc:	4293      	cmp	r3, r2
 80049be:	d100      	bne.n	80049c2 <memset+0xa>
 80049c0:	4770      	bx	lr
 80049c2:	f803 1b01 	strb.w	r1, [r3], #1
 80049c6:	e7f9      	b.n	80049bc <memset+0x4>

080049c8 <_init>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr

080049d4 <_fini>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr
